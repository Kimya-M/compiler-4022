[['Type', 't_id', "ParameterList'"]]
[94mThe Grammar after removing left recursion:[0m

New set of productions: 
Program -> ['Declist']
Declist -> ['Dec', "Declist'"]
Declist' -> ['Dec', "Declist'"]
Declist' -> ['Îµ']
Dec -> ['Type', 't_id', 'Declaration']
Declaration -> ['Vardec']
Declaration -> ['Funcdec']
Type -> ['t_int']
Type -> ['t_bool']
Type -> ['t_char']
Vardec -> ['Vardeclist', 't_semicolon']
Vardeclist -> ['VardecInit', "Vardeclist'"]
Vardeclist' -> ['t_comma', 't_id', 'VardecInit', "Vardeclist'"]
Vardeclist' -> ['Îµ']
VardecInit -> ['Array', "VardecInit'"]
VardecInit' -> ['t_assign', 'Expression']
VardecInit' -> ['Îµ']
Array -> ['t_lb', 'Arraysize', 't_rb']
Array -> ['Îµ']
Arraysize -> ['Expression']
Arraysize -> ['Îµ']
Funcdec -> ['t_lp', 'Parameters', 't_rp', 'Statement']
Parameters -> ['ParameterList']
Parameters -> ['Îµ']
ParameterList -> ['t_int', 't_id', "ParameterList'"]
ParameterList -> ['t_bool', 't_id', "ParameterList'"]
ParameterList -> ['t_char', 't_id', "ParameterList'"]
ParameterList' -> ['t_comma', 'Type', 't_id', 'Array', "ParameterList'"]
ParameterList' -> ['Îµ']
Statement -> ['CompoundStmt']
Statement -> ['SimpleStmt']
Statement -> ['IfStmt']
Statement -> ['LoopStmt']
Statement -> ['PrintStmt']
Statement -> ['BreakStmt']
Statement -> ['ReturnStmt']
Statement -> ['ContinueStmt']
Statement -> ['VardecStmt']
CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
StatementList -> ['SimpleStmt', 'StatementList']
StatementList -> ['IfStmt', 'StatementList']
StatementList -> ['LoopStmt', 'StatementList']
StatementList -> ['PrintStmt', 'StatementList']
StatementList -> ['BreakStmt', 'StatementList']
StatementList -> ['ReturnStmt', 'StatementList']
StatementList -> ['ContinueStmt', 'StatementList']
StatementList -> ['VardecStmt', 'StatementList']
StatementList -> ['Îµ']
IfStmt -> ['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']
ElseStmt -> ['t_else', 'CompoundStmt']
ElseStmt -> ['Îµ']
LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_bool', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_char', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_id', 't_assign', 'Expression']
LoopVardec -> ['Îµ']
LoopExpr -> ['Expression']
LoopExpr -> ['Îµ']
LoopStep -> ['SimpleStmt2']
LoopStep -> ['Îµ']
SimpleStmt -> ['t_id', 'Array2', 't_assign', 'Expression', 't_semicolon']
SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Array2 -> ['t_lb', 'Arraysize2', 't_rb']
Array2 -> ['Îµ']
Arraysize2 -> ['Expression']
VardecStmt -> ['t_int', 't_id', 'Vardeclist', 't_semicolon']
VardecStmt -> ['t_bool', 't_id', 'Vardeclist', 't_semicolon']
VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
ReturnStmt -> ['t_return', 't_semicolon']
ReturnStmt -> ['t_return', 'Expression', 't_semicolon']
BreakStmt -> ['t_break', 't_semicolon']
ContinueStmt -> ['t_continue', 't_semicolon']
PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
PrintRules -> ['Expression', 'PrintList']
PrintList -> ['t_comma', 'Expression', 'PrintList']
PrintList -> ['Îµ']
Expression -> ['OrExp']
OrExp -> ['AndExp', 'Or']
Or -> ['t_lop_or', 'AndExp', 'Or']
Or -> ['Îµ']
AndExp -> ['NotExp', 'And']
And -> ['t_lop_and', 'NotExp', 'And']
And -> ['Îµ']
NotExp -> ['t_lop_not', 'NotExp']
NotExp -> ['CompExp']
CompExp -> ['Expr', 'Comp']
Comp -> ['Comp_OP', 'Expr', 'Comp']
Comp -> ['Îµ']
Comp_OP -> ['t_rop_l']
Comp_OP -> ['t_rop_g']
Comp_OP -> ['t_rop_le']
Comp_OP -> ['t_rop_ge']
Comp_OP -> ['t_rop_ne']
Comp_OP -> ['t_rop_e']
Expr -> ['Term', 'Arth1']
Arth1 -> ['t_aop_pl', 'Term', 'Arth1']
Arth1 -> ['t_aop_mn', 'Term', 'Arth1']
Arth1 -> ['Îµ']
Term -> ['Factor', 'Arth2']
Arth2 -> ['t_aop_ml', 'Factor', 'Arth2']
Arth2 -> ['t_aop_dv', 'Factor', 'Arth2']
Arth2 -> ['t_aop_rm', 'Factor', 'Arth2']
Arth2 -> ['Îµ']
Factor -> ['t_aop_pl', 'Atom']
Factor -> ['t_aop_mn', 'Atom']
Factor -> ['Atom']
Atom -> ['t_id', 'IsFunction']
Atom -> ['t_decimal']
Atom -> ['t_hexadecimal']
Atom -> ['t_string']
Atom -> ['t_char']
Atom -> ['t_true']
Atom -> ['t_false']
Atom -> ['t_lp', 'Expression', 't_rp']
IsFunction -> ['Îµ']
IsFunction -> ['t_lp', 'Parameters2', 't_rp']
Parameters2 -> ['ParameterList2']
Parameters2 -> ['Îµ']
ParameterList2 -> ['t_id', "ParameterList2'"]
ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
ParameterList2' -> ['Îµ']
[94m-------------------
-------------------[0m

[['t_int', 't_id', "ParameterList'"], ['t_bool', 't_id', "ParameterList'"], ['t_char', 't_id', "ParameterList'"]]
[94mThe Grammar after removing left recursion and left factoring:[0m

New set of productions: 
Program -> ['Declist']
Declist -> ['Dec', "Declist'"]
Declist' -> ['Dec', "Declist'"]
Declist' -> ['Îµ']
Dec -> ['Type', 't_id', 'Declaration']
Declaration -> ['Vardec']
Declaration -> ['Funcdec']
Type -> ['t_int']
Type -> ['t_bool']
Type -> ['t_char']
Vardec -> ['Vardeclist', 't_semicolon']
Vardeclist -> ['VardecInit', "Vardeclist'"]
Vardeclist' -> ['t_comma', 't_id', 'VardecInit', "Vardeclist'"]
Vardeclist' -> ['Îµ']
VardecInit -> ['Array', "VardecInit'"]
VardecInit' -> ['t_assign', 'Expression']
VardecInit' -> ['Îµ']
Array -> ['t_lb', 'Arraysize', 't_rb']
Array -> ['Îµ']
Arraysize -> ['Expression']
Arraysize -> ['Îµ']
Funcdec -> ['t_lp', 'Parameters', 't_rp', 'Statement']
Parameters -> ['ParameterList']
Parameters -> ['Îµ']
ParameterList -> ['t_int', 't_id', "ParameterList'"]
ParameterList -> ['t_bool', 't_id', "ParameterList'"]
ParameterList -> ['t_char', 't_id', "ParameterList'"]
ParameterList' -> ['t_comma', 'Type', 't_id', 'Array', "ParameterList'"]
ParameterList' -> ['Îµ']
Statement -> ['CompoundStmt']
Statement -> ['SimpleStmt']
Statement -> ['IfStmt']
Statement -> ['LoopStmt']
Statement -> ['PrintStmt']
Statement -> ['BreakStmt']
Statement -> ['ReturnStmt']
Statement -> ['ContinueStmt']
Statement -> ['VardecStmt']
CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
StatementList -> ['SimpleStmt', 'StatementList']
StatementList -> ['IfStmt', 'StatementList']
StatementList -> ['LoopStmt', 'StatementList']
StatementList -> ['PrintStmt', 'StatementList']
StatementList -> ['BreakStmt', 'StatementList']
StatementList -> ['ReturnStmt', 'StatementList']
StatementList -> ['ContinueStmt', 'StatementList']
StatementList -> ['VardecStmt', 'StatementList']
StatementList -> ['Îµ']
IfStmt -> ['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']
ElseStmt -> ['t_else', 'CompoundStmt']
ElseStmt -> ['Îµ']
LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_bool', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_char', 't_id', 't_assign', 'Expression']
LoopVardec -> ['t_id', 't_assign', 'Expression']
LoopVardec -> ['Îµ']
LoopExpr -> ['Expression']
LoopExpr -> ['Îµ']
LoopStep -> ['SimpleStmt2']
LoopStep -> ['Îµ']
SimpleStmt -> ['t_id', 'Array2', 't_assign', 'Expression', 't_semicolon']
SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Array2 -> ['t_lb', 'Arraysize2', 't_rb']
Array2 -> ['Îµ']
Arraysize2 -> ['Expression']
VardecStmt -> ['t_int', 't_id', 'Vardeclist', 't_semicolon']
VardecStmt -> ['t_bool', 't_id', 'Vardeclist', 't_semicolon']
VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
ReturnStmt -> ['t_return', 'ReturnStmt1']
ReturnStmt1 -> ['t_semicolon']
ReturnStmt1 -> ['Expression', 't_semicolon']
BreakStmt -> ['t_break', 't_semicolon']
ContinueStmt -> ['t_continue', 't_semicolon']
PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
PrintRules -> ['Expression', 'PrintList']
PrintList -> ['t_comma', 'Expression', 'PrintList']
PrintList -> ['Îµ']
Expression -> ['OrExp']
OrExp -> ['AndExp', 'Or']
Or -> ['t_lop_or', 'AndExp', 'Or']
Or -> ['Îµ']
AndExp -> ['NotExp', 'And']
And -> ['t_lop_and', 'NotExp', 'And']
And -> ['Îµ']
NotExp -> ['t_lop_not', 'NotExp']
NotExp -> ['CompExp']
CompExp -> ['Expr', 'Comp']
Comp -> ['Comp_OP', 'Expr', 'Comp']
Comp -> ['Îµ']
Comp_OP -> ['t_rop_l']
Comp_OP -> ['t_rop_g']
Comp_OP -> ['t_rop_le']
Comp_OP -> ['t_rop_ge']
Comp_OP -> ['t_rop_ne']
Comp_OP -> ['t_rop_e']
Expr -> ['Term', 'Arth1']
Arth1 -> ['t_aop_pl', 'Term', 'Arth1']
Arth1 -> ['t_aop_mn', 'Term', 'Arth1']
Arth1 -> ['Îµ']
Term -> ['Factor', 'Arth2']
Arth2 -> ['t_aop_ml', 'Factor', 'Arth2']
Arth2 -> ['t_aop_dv', 'Factor', 'Arth2']
Arth2 -> ['t_aop_rm', 'Factor', 'Arth2']
Arth2 -> ['Îµ']
Factor -> ['t_aop_pl', 'Atom']
Factor -> ['t_aop_mn', 'Atom']
Factor -> ['Atom']
Atom -> ['t_id', 'IsFunction']
Atom -> ['t_decimal']
Atom -> ['t_hexadecimal']
Atom -> ['t_string']
Atom -> ['t_char']
Atom -> ['t_true']
Atom -> ['t_false']
Atom -> ['t_lp', 'Expression', 't_rp']
IsFunction -> ['Îµ']
IsFunction -> ['t_lp', 'Parameters2', 't_rp']
Parameters2 -> ['ParameterList2']
Parameters2 -> ['Îµ']
ParameterList2 -> ['t_id', "ParameterList2'"]
ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
ParameterList2' -> ['Îµ']
[94m-------------------
-------------------[0m

[['t_int', 't_id', "ParameterList'"], ['t_bool', 't_id', "ParameterList'"], ['t_char', 't_id', "ParameterList'"]]
[92mThe grammar is LL(1).[0m
[94m-------------------
-------------------[0m

[94mFirst sets:[0m
First set Program : {'t_char', 't_int', 't_bool'}
First set Declist : {'t_char', 't_int', 't_bool'}
First set Declist' : {'t_char', 't_int', 't_bool', 'Îµ'}
First set Dec : {'t_char', 't_int', 't_bool'}
First set Declaration : {'t_semicolon', 't_lp', 't_assign', 't_lb', 't_comma'}
First set Type : {'t_char', 't_int', 't_bool'}
First set Vardec : {'t_lb', 't_semicolon', 't_comma', 't_assign'}
First set Vardeclist : {'t_lb', 't_comma', 'Îµ', 't_assign'}
First set Vardeclist' : {'t_comma', 'Îµ'}
First set VardecInit : {'t_lb', 'Îµ', 't_assign'}
First set VardecInit' : {'Îµ', 't_assign'}
First set Array : {'t_lb', 'Îµ'}
First set Arraysize : {'t_false', 't_lp', 't_string', 'Îµ', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set Funcdec : {'t_lp'}
First set Parameters : {'t_char', 't_int', 't_bool', 'Îµ'}
First set ParameterList : {'t_char', 't_int', 't_bool'}
First set ParameterList' : {'t_comma', 'Îµ'}
First set Statement : {'t_bool', 't_print', 't_char', 't_id', 't_if', 't_break', 't_lc', 't_int', 't_return', 't_continue', 't_for'}
First set CompoundStmt : {'t_lc'}
First set StatementList : {'t_bool', 't_print', 'Îµ', 't_char', 't_id', 't_if', 't_break', 't_lc', 't_int', 't_return', 't_continue', 't_for'}
First set IfStmt : {'t_if'}
First set ElseStmt : {'t_else', 'Îµ'}
First set LoopStmt : {'t_for'}
First set ForStmt : {'t_semicolon', 't_bool', 't_char', 't_id', 't_int'}
First set LoopVardec : {'t_bool', 'Îµ', 't_char', 't_id', 't_int'}
First set LoopExpr : {'t_false', 't_lp', 't_string', 'Îµ', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set LoopStep : {'t_id', 'Îµ'}
First set SimpleStmt : {'t_id'}
First set SimpleStmt2 : {'t_id'}
First set Array2 : {'t_lb', 'Îµ'}
First set Arraysize2 : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set VardecStmt : {'t_char', 't_int', 't_bool'}
First set ReturnStmt : {'t_return'}
First set ReturnStmt1 : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_semicolon', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set BreakStmt : {'t_break'}
First set ContinueStmt : {'t_continue'}
First set PrintStmt : {'t_print'}
First set PrintRules : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set PrintList : {'t_comma', 'Îµ'}
First set Expression : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set OrExp : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set Or : {'t_lop_or', 'Îµ'}
First set AndExp : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set And : {'t_lop_and', 'Îµ'}
First set NotExp : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn', 't_lop_not'}
First set CompExp : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn'}
First set Comp : {'t_rop_l', 't_rop_g', 't_rop_ge', 't_rop_le', 'Îµ', 't_rop_e', 't_rop_ne'}
First set Comp_OP : {'t_rop_l', 't_rop_le', 't_rop_ge', 't_rop_g', 't_rop_e', 't_rop_ne'}
First set Expr : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn'}
First set Arth1 : {'t_aop_pl', 't_aop_mn', 'Îµ'}
First set Term : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn'}
First set Arth2 : {'Îµ', 't_aop_dv', 't_aop_ml', 't_aop_rm'}
First set Factor : {'t_false', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn'}
First set Atom : {'t_false', 't_decimal', 't_true', 't_lp', 't_string', 't_char', 't_id', 't_hexadecimal'}
First set IsFunction : {'t_lp', 'Îµ'}
First set Parameters2 : {'t_id', 'Îµ'}
First set ParameterList2 : {'t_id'}
First set ParameterList2' : {'t_comma', 'Îµ'}
[94m-------------------
-------------------[0m

[94mFollow sets:[0m
Follow set Program : {'$'}
Follow set Declist : {'$'}
Follow set Declist' : {'$'}
Follow set Dec : {'t_bool', 't_char', '$', 't_int'}
Follow set Declaration : {'t_bool', 't_char', '$', 't_int'}
Follow set Type : {'t_id'}
Follow set Vardec : {'t_bool', 't_char', '$', 't_int'}
Follow set Vardeclist : {'t_semicolon'}
Follow set Vardeclist' : {'t_semicolon'}
Follow set VardecInit : {'t_semicolon', 't_comma'}
Follow set VardecInit' : {'t_semicolon', 't_comma'}
Follow set Array : {'t_semicolon', 't_assign', 't_rp', 't_comma'}
Follow set Arraysize : {'t_rb'}
Follow set Funcdec : {'t_bool', 't_char', '$', 't_int'}
Follow set Parameters : {'t_rp'}
Follow set ParameterList : {'t_rp'}
Follow set ParameterList' : {'t_rp'}
Follow set Statement : {'t_bool', 't_char', '$', 't_int'}
Follow set CompoundStmt : {'t_else', 't_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set StatementList : {'t_rc'}
Follow set IfStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set ElseStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set LoopStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set ForStmt : {'t_rp'}
Follow set LoopVardec : {'t_semicolon'}
Follow set LoopExpr : {'t_semicolon'}
Follow set LoopStep : {'t_rp'}
Follow set SimpleStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set SimpleStmt2 : {'t_rp'}
Follow set Array2 : {'t_assign'}
Follow set Arraysize2 : {'t_rb'}
Follow set VardecStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set ReturnStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set ReturnStmt1 : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set BreakStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set ContinueStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set PrintStmt : {'t_bool', 't_print', 't_char', '$', 't_id', 't_if', 't_break', 't_lc', 't_return', 't_continue', 't_rc', 't_int', 't_for'}
Follow set PrintRules : {'t_rp'}
Follow set PrintList : {'t_rp'}
Follow set Expression : {'t_rp', 't_semicolon', 't_rb', 't_lc', 't_comma'}
Follow set OrExp : {'t_rb', 't_lc', 't_semicolon', 't_rp', 't_comma'}
Follow set Or : {'t_rb', 't_lc', 't_semicolon', 't_rp', 't_comma'}
Follow set AndExp : {'t_rb', 't_lop_or', 't_lc', 't_semicolon', 't_rp', 't_comma'}
Follow set And : {'t_rb', 't_lop_or', 't_lc', 't_semicolon', 't_rp', 't_comma'}
Follow set NotExp : {'t_rb', 't_lop_or', 't_lc', 't_lop_and', 't_semicolon', 't_rp', 't_comma'}
Follow set CompExp : {'t_rb', 't_lop_or', 't_lc', 't_lop_and', 't_semicolon', 't_rp', 't_comma'}
Follow set Comp : {'t_rb', 't_lop_or', 't_lc', 't_lop_and', 't_semicolon', 't_rp', 't_comma'}
Follow set Comp_OP : {'t_false', 't_string', 't_char', 't_id', 't_lp', 't_hexadecimal', 't_decimal', 't_true', 't_aop_pl', 't_aop_mn'}
Follow set Expr : {'t_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_lop_and', 't_rop_l', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_semicolon', 't_rop_e'}
Follow set Arth1 : {'t_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_lop_and', 't_rop_l', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_semicolon', 't_rop_e'}
Follow set Term : {'t_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_lop_and', 't_rop_l', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_aop_pl', 't_semicolon', 't_rop_e', 't_aop_mn'}
Follow set Arth2 : {'t_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_lop_and', 't_rop_l', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_aop_pl', 't_semicolon', 't_rop_e', 't_aop_mn'}
Follow set Factor : {'t_aop_dv', 't_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_aop_rm', 't_lop_and', 't_rop_l', 't_aop_ml', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_aop_pl', 't_semicolon', 't_rop_e', 't_aop_mn'}
Follow set Atom : {'t_aop_dv', 't_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_aop_rm', 't_lop_and', 't_rop_l', 't_aop_ml', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_aop_pl', 't_semicolon', 't_rop_e', 't_aop_mn'}
Follow set IsFunction : {'t_aop_dv', 't_rop_ge', 't_rb', 't_lop_or', 't_lc', 't_aop_rm', 't_lop_and', 't_rop_l', 't_aop_ml', 't_rop_ne', 't_rp', 't_comma', 't_rop_le', 't_rop_g', 't_aop_pl', 't_semicolon', 't_rop_e', 't_aop_mn'}
Follow set Parameters2 : {'t_rp'}
Follow set ParameterList2 : {'t_rp'}
Follow set ParameterList2' : {'t_rp'}
[94m-------------------
-------------------[0m

Parsing Table:
[93mM[Program, t_char][0m = [96m[['Declist']][0m
[93mM[Program, t_int][0m = [96m[['Declist']][0m
[93mM[Program, t_bool][0m = [96m[['Declist']][0m
[93mM[Program, $][0m = [96msynch[0m
[93mM[Declist, t_char][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist, t_int][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist, t_bool][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist, $][0m = [96msynch[0m
[93mM[Declist', t_char][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist', t_int][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist', t_bool][0m = [96m[['Dec', "Declist'"]][0m
[93mM[Declist', $][0m = [96m[['Îµ']][0m
[93mM[Dec, t_char][0m = [96m[['Type', 't_id', 'Declaration']][0m
[93mM[Dec, t_int][0m = [96m[['Type', 't_id', 'Declaration']][0m
[93mM[Dec, t_bool][0m = [96m[['Type', 't_id', 'Declaration']][0m
[93mM[Dec, $][0m = [96msynch[0m
[93mM[Declaration, t_lb][0m = [96m[['Vardec']][0m
[93mM[Declaration, t_semicolon][0m = [96m[['Vardec']][0m
[93mM[Declaration, t_comma][0m = [96m[['Vardec']][0m
[93mM[Declaration, t_assign][0m = [96m[['Vardec']][0m
[93mM[Declaration, t_lp][0m = [96m[['Funcdec']][0m
[93mM[Declaration, t_bool][0m = [96msynch[0m
[93mM[Declaration, t_char][0m = [96msynch[0m
[93mM[Declaration, $][0m = [96msynch[0m
[93mM[Declaration, t_int][0m = [96msynch[0m
[93mM[Type, t_int][0m = [96m[['t_int']][0m
[93mM[Type, t_bool][0m = [96m[['t_bool']][0m
[93mM[Type, t_char][0m = [96m[['t_char']][0m
[93mM[Type, t_id][0m = [96msynch[0m
[93mM[Vardec, t_semicolon][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_bool][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, $][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_char][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_int][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_assign][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_lb][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardec, t_comma][0m = [96m[['Vardeclist', 't_semicolon']][0m
[93mM[Vardeclist, t_semicolon][0m = [96m[['VardecInit', "Vardeclist'"]][0m
[93mM[Vardeclist, t_assign][0m = [96m[['VardecInit', "Vardeclist'"]][0m
[93mM[Vardeclist, t_lb][0m = [96m[['VardecInit', "Vardeclist'"]][0m
[93mM[Vardeclist, t_comma][0m = [96m[['VardecInit', "Vardeclist'"]][0m
[93mM[Vardeclist', t_comma][0m = [96m[['t_comma', 't_id', 'VardecInit', "Vardeclist'"]][0m
[93mM[Vardeclist', t_semicolon][0m = [96m[['Îµ']][0m
[93mM[VardecInit, t_lb][0m = [96m[['Array', "VardecInit'"]][0m
[93mM[VardecInit, t_semicolon][0m = [96m[['Array', "VardecInit'"]][0m
[93mM[VardecInit, t_comma][0m = [96m[['Array', "VardecInit'"]][0m
[93mM[VardecInit, t_assign][0m = [96m[['Array', "VardecInit'"]][0m
[93mM[VardecInit', t_assign][0m = [96m[['t_assign', 'Expression']][0m
[93mM[VardecInit', t_semicolon][0m = [96m[['Îµ']][0m
[93mM[VardecInit', t_comma][0m = [96m[['Îµ']][0m
[93mM[Array, t_lb][0m = [96m[['t_lb', 'Arraysize', 't_rb']][0m
[93mM[Array, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[Array, t_assign][0m = [96m[['Îµ']][0m
[93mM[Array, t_rp][0m = [96m[['Îµ']][0m
[93mM[Array, t_comma][0m = [96m[['Îµ']][0m
[93mM[Arraysize, t_false][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_lp][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_string][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_char][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_id][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_hexadecimal][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_decimal][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_true][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_aop_pl][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_aop_mn][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_lop_not][0m = [96m[['Expression']][0m
[93mM[Arraysize, t_rb][0m = [96m[['Îµ']][0m
[93mM[Funcdec, t_lp][0m = [96m[['t_lp', 'Parameters', 't_rp', 'Statement']][0m
[93mM[Funcdec, t_bool][0m = [96msynch[0m
[93mM[Funcdec, t_char][0m = [96msynch[0m
[93mM[Funcdec, $][0m = [96msynch[0m
[93mM[Funcdec, t_int][0m = [96msynch[0m
[93mM[Parameters, t_char][0m = [96m[['ParameterList']][0m
[93mM[Parameters, t_int][0m = [96m[['ParameterList']][0m
[93mM[Parameters, t_bool][0m = [96m[['ParameterList']][0m
[93mM[Parameters, t_rp][0m = [96m[['Îµ']][0m
[93mM[ParameterList, t_int][0m = [96m[['t_int', 't_id', "ParameterList'"]][0m
[93mM[ParameterList, t_bool][0m = [96m[['t_bool', 't_id', "ParameterList'"]][0m
[93mM[ParameterList, t_char][0m = [96m[['t_char', 't_id', "ParameterList'"]][0m
[93mM[ParameterList, t_rp][0m = [96msynch[0m
[93mM[ParameterList', t_comma][0m = [96m[['t_comma', 'Type', 't_id', 'Array', "ParameterList'"]][0m
[93mM[ParameterList', t_rp][0m = [96m[['Îµ']][0m
[93mM[Statement, t_lc][0m = [96m[['CompoundStmt']][0m
[93mM[Statement, t_id][0m = [96m[['SimpleStmt']][0m
[93mM[Statement, t_if][0m = [96m[['IfStmt']][0m
[93mM[Statement, t_for][0m = [96m[['LoopStmt']][0m
[93mM[Statement, t_print][0m = [96m[['PrintStmt']][0m
[93mM[Statement, t_break][0m = [96m[['BreakStmt']][0m
[93mM[Statement, t_return][0m = [96m[['ReturnStmt']][0m
[93mM[Statement, t_continue][0m = [96m[['ContinueStmt']][0m
[93mM[Statement, t_char][0m = [96m[['VardecStmt']][0m
[93mM[Statement, t_int][0m = [96m[['VardecStmt']][0m
[93mM[Statement, t_bool][0m = [96m[['VardecStmt']][0m
[93mM[Statement, $][0m = [96msynch[0m
[93mM[CompoundStmt, t_lc][0m = [96m[['t_lc', 'StatementList', 't_rc']][0m
[93mM[CompoundStmt, t_else][0m = [96msynch[0m
[93mM[CompoundStmt, t_bool][0m = [96msynch[0m
[93mM[CompoundStmt, t_print][0m = [96msynch[0m
[93mM[CompoundStmt, t_char][0m = [96msynch[0m
[93mM[CompoundStmt, $][0m = [96msynch[0m
[93mM[CompoundStmt, t_id][0m = [96msynch[0m
[93mM[CompoundStmt, t_if][0m = [96msynch[0m
[93mM[CompoundStmt, t_break][0m = [96msynch[0m
[93mM[CompoundStmt, t_return][0m = [96msynch[0m
[93mM[CompoundStmt, t_continue][0m = [96msynch[0m
[93mM[CompoundStmt, t_rc][0m = [96msynch[0m
[93mM[CompoundStmt, t_int][0m = [96msynch[0m
[93mM[CompoundStmt, t_for][0m = [96msynch[0m
[93mM[StatementList, t_lc][0m = [96m[['t_lc', 'StatementList', 't_rc', 'StatementList']][0m
[93mM[StatementList, t_id][0m = [96m[['SimpleStmt', 'StatementList']][0m
[93mM[StatementList, t_if][0m = [96m[['IfStmt', 'StatementList']][0m
[93mM[StatementList, t_for][0m = [96m[['LoopStmt', 'StatementList']][0m
[93mM[StatementList, t_print][0m = [96m[['PrintStmt', 'StatementList']][0m
[93mM[StatementList, t_break][0m = [96m[['BreakStmt', 'StatementList']][0m
[93mM[StatementList, t_return][0m = [96m[['ReturnStmt', 'StatementList']][0m
[93mM[StatementList, t_continue][0m = [96m[['ContinueStmt', 'StatementList']][0m
[93mM[StatementList, t_char][0m = [96m[['VardecStmt', 'StatementList']][0m
[93mM[StatementList, t_int][0m = [96m[['VardecStmt', 'StatementList']][0m
[93mM[StatementList, t_bool][0m = [96m[['VardecStmt', 'StatementList']][0m
[93mM[StatementList, t_rc][0m = [96m[['Îµ']][0m
[93mM[IfStmt, t_if][0m = [96m[['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']][0m
[93mM[IfStmt, t_bool][0m = [96msynch[0m
[93mM[IfStmt, t_print][0m = [96msynch[0m
[93mM[IfStmt, t_char][0m = [96msynch[0m
[93mM[IfStmt, $][0m = [96msynch[0m
[93mM[IfStmt, t_id][0m = [96msynch[0m
[93mM[IfStmt, t_break][0m = [96msynch[0m
[93mM[IfStmt, t_lc][0m = [96msynch[0m
[93mM[IfStmt, t_return][0m = [96msynch[0m
[93mM[IfStmt, t_continue][0m = [96msynch[0m
[93mM[IfStmt, t_rc][0m = [96msynch[0m
[93mM[IfStmt, t_int][0m = [96msynch[0m
[93mM[IfStmt, t_for][0m = [96msynch[0m
[93mM[ElseStmt, t_else][0m = [96m[['t_else', 'CompoundStmt']][0m
[93mM[ElseStmt, t_bool][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, $][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_print][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_char][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_id][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_if][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_break][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_lc][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_return][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_continue][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_rc][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_int][0m = [96m[['Îµ']][0m
[93mM[ElseStmt, t_for][0m = [96m[['Îµ']][0m
[93mM[LoopStmt, t_for][0m = [96m[['t_for', 't_lp', 'ForStmt', 't_rp']][0m
[93mM[LoopStmt, t_bool][0m = [96msynch[0m
[93mM[LoopStmt, t_print][0m = [96msynch[0m
[93mM[LoopStmt, t_char][0m = [96msynch[0m
[93mM[LoopStmt, $][0m = [96msynch[0m
[93mM[LoopStmt, t_id][0m = [96msynch[0m
[93mM[LoopStmt, t_if][0m = [96msynch[0m
[93mM[LoopStmt, t_break][0m = [96msynch[0m
[93mM[LoopStmt, t_lc][0m = [96msynch[0m
[93mM[LoopStmt, t_return][0m = [96msynch[0m
[93mM[LoopStmt, t_continue][0m = [96msynch[0m
[93mM[LoopStmt, t_rc][0m = [96msynch[0m
[93mM[LoopStmt, t_int][0m = [96msynch[0m
[93mM[ForStmt, t_semicolon][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[ForStmt, t_bool][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[ForStmt, t_rp][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[ForStmt, t_char][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[ForStmt, t_id][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[ForStmt, t_int][0m = [96m[['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']][0m
[93mM[LoopVardec, t_int][0m = [96m[['t_int', 't_id', 't_assign', 'Expression']][0m
[93mM[LoopVardec, t_bool][0m = [96m[['t_bool', 't_id', 't_assign', 'Expression']][0m
[93mM[LoopVardec, t_char][0m = [96m[['t_char', 't_id', 't_assign', 'Expression']][0m
[93mM[LoopVardec, t_id][0m = [96m[['t_id', 't_assign', 'Expression']][0m
[93mM[LoopVardec, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[LoopExpr, t_false][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_lp][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_string][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_char][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_id][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_hexadecimal][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_decimal][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_true][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_aop_pl][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_aop_mn][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_lop_not][0m = [96m[['Expression']][0m
[93mM[LoopExpr, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[LoopStep, t_id][0m = [96m[['SimpleStmt2']][0m
[93mM[LoopStep, t_rp][0m = [96m[['Îµ']][0m
[93mM[SimpleStmt, t_id][0m = [96m[['t_id', 'Array2', 't_assign', 'Expression', 't_semicolon']][0m
[93mM[SimpleStmt, t_bool][0m = [96msynch[0m
[93mM[SimpleStmt, t_print][0m = [96msynch[0m
[93mM[SimpleStmt, t_char][0m = [96msynch[0m
[93mM[SimpleStmt, $][0m = [96msynch[0m
[93mM[SimpleStmt, t_if][0m = [96msynch[0m
[93mM[SimpleStmt, t_break][0m = [96msynch[0m
[93mM[SimpleStmt, t_lc][0m = [96msynch[0m
[93mM[SimpleStmt, t_return][0m = [96msynch[0m
[93mM[SimpleStmt, t_continue][0m = [96msynch[0m
[93mM[SimpleStmt, t_rc][0m = [96msynch[0m
[93mM[SimpleStmt, t_int][0m = [96msynch[0m
[93mM[SimpleStmt, t_for][0m = [96msynch[0m
[93mM[SimpleStmt2, t_id][0m = [96m[['t_id', 'Array2', 't_assign', 'Expression']][0m
[93mM[SimpleStmt2, t_rp][0m = [96msynch[0m
[93mM[Array2, t_lb][0m = [96m[['t_lb', 'Arraysize2', 't_rb']][0m
[93mM[Array2, t_assign][0m = [96m[['Îµ']][0m
[93mM[Arraysize2, t_false][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_lp][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_string][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_char][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_id][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_hexadecimal][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_decimal][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_true][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_aop_pl][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_aop_mn][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_lop_not][0m = [96m[['Expression']][0m
[93mM[Arraysize2, t_rb][0m = [96msynch[0m
[93mM[VardecStmt, t_int][0m = [96m[['t_int', 't_id', 'Vardeclist', 't_semicolon']][0m
[93mM[VardecStmt, t_bool][0m = [96m[['t_bool', 't_id', 'Vardeclist', 't_semicolon']][0m
[93mM[VardecStmt, t_char][0m = [96m[['t_char', 't_id', 'Vardeclist', 't_semicolon']][0m
[93mM[VardecStmt, t_print][0m = [96msynch[0m
[93mM[VardecStmt, $][0m = [96msynch[0m
[93mM[VardecStmt, t_id][0m = [96msynch[0m
[93mM[VardecStmt, t_if][0m = [96msynch[0m
[93mM[VardecStmt, t_break][0m = [96msynch[0m
[93mM[VardecStmt, t_lc][0m = [96msynch[0m
[93mM[VardecStmt, t_return][0m = [96msynch[0m
[93mM[VardecStmt, t_continue][0m = [96msynch[0m
[93mM[VardecStmt, t_rc][0m = [96msynch[0m
[93mM[VardecStmt, t_for][0m = [96msynch[0m
[93mM[ReturnStmt, t_return][0m = [96m[['t_return', 'ReturnStmt1']][0m
[93mM[ReturnStmt, t_bool][0m = [96msynch[0m
[93mM[ReturnStmt, t_print][0m = [96msynch[0m
[93mM[ReturnStmt, t_char][0m = [96msynch[0m
[93mM[ReturnStmt, $][0m = [96msynch[0m
[93mM[ReturnStmt, t_id][0m = [96msynch[0m
[93mM[ReturnStmt, t_if][0m = [96msynch[0m
[93mM[ReturnStmt, t_break][0m = [96msynch[0m
[93mM[ReturnStmt, t_lc][0m = [96msynch[0m
[93mM[ReturnStmt, t_continue][0m = [96msynch[0m
[93mM[ReturnStmt, t_rc][0m = [96msynch[0m
[93mM[ReturnStmt, t_int][0m = [96msynch[0m
[93mM[ReturnStmt, t_for][0m = [96msynch[0m
[93mM[ReturnStmt1, t_semicolon][0m = [96m[['t_semicolon']][0m
[93mM[ReturnStmt1, t_false][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_lp][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_string][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_char][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_id][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_hexadecimal][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_decimal][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_true][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_aop_pl][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_aop_mn][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_lop_not][0m = [96m[['Expression', 't_semicolon']][0m
[93mM[ReturnStmt1, t_bool][0m = [96msynch[0m
[93mM[ReturnStmt1, t_print][0m = [96msynch[0m
[93mM[ReturnStmt1, $][0m = [96msynch[0m
[93mM[ReturnStmt1, t_if][0m = [96msynch[0m
[93mM[ReturnStmt1, t_break][0m = [96msynch[0m
[93mM[ReturnStmt1, t_lc][0m = [96msynch[0m
[93mM[ReturnStmt1, t_return][0m = [96msynch[0m
[93mM[ReturnStmt1, t_continue][0m = [96msynch[0m
[93mM[ReturnStmt1, t_rc][0m = [96msynch[0m
[93mM[ReturnStmt1, t_int][0m = [96msynch[0m
[93mM[ReturnStmt1, t_for][0m = [96msynch[0m
[93mM[BreakStmt, t_break][0m = [96m[['t_break', 't_semicolon']][0m
[93mM[BreakStmt, t_bool][0m = [96msynch[0m
[93mM[BreakStmt, t_print][0m = [96msynch[0m
[93mM[BreakStmt, t_char][0m = [96msynch[0m
[93mM[BreakStmt, $][0m = [96msynch[0m
[93mM[BreakStmt, t_id][0m = [96msynch[0m
[93mM[BreakStmt, t_if][0m = [96msynch[0m
[93mM[BreakStmt, t_lc][0m = [96msynch[0m
[93mM[BreakStmt, t_return][0m = [96msynch[0m
[93mM[BreakStmt, t_continue][0m = [96msynch[0m
[93mM[BreakStmt, t_rc][0m = [96msynch[0m
[93mM[BreakStmt, t_int][0m = [96msynch[0m
[93mM[BreakStmt, t_for][0m = [96msynch[0m
[93mM[ContinueStmt, t_continue][0m = [96m[['t_continue', 't_semicolon']][0m
[93mM[ContinueStmt, t_bool][0m = [96msynch[0m
[93mM[ContinueStmt, t_print][0m = [96msynch[0m
[93mM[ContinueStmt, t_char][0m = [96msynch[0m
[93mM[ContinueStmt, $][0m = [96msynch[0m
[93mM[ContinueStmt, t_id][0m = [96msynch[0m
[93mM[ContinueStmt, t_if][0m = [96msynch[0m
[93mM[ContinueStmt, t_break][0m = [96msynch[0m
[93mM[ContinueStmt, t_lc][0m = [96msynch[0m
[93mM[ContinueStmt, t_return][0m = [96msynch[0m
[93mM[ContinueStmt, t_rc][0m = [96msynch[0m
[93mM[ContinueStmt, t_int][0m = [96msynch[0m
[93mM[ContinueStmt, t_for][0m = [96msynch[0m
[93mM[PrintStmt, t_print][0m = [96m[['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']][0m
[93mM[PrintStmt, t_bool][0m = [96msynch[0m
[93mM[PrintStmt, t_char][0m = [96msynch[0m
[93mM[PrintStmt, $][0m = [96msynch[0m
[93mM[PrintStmt, t_id][0m = [96msynch[0m
[93mM[PrintStmt, t_if][0m = [96msynch[0m
[93mM[PrintStmt, t_break][0m = [96msynch[0m
[93mM[PrintStmt, t_lc][0m = [96msynch[0m
[93mM[PrintStmt, t_return][0m = [96msynch[0m
[93mM[PrintStmt, t_continue][0m = [96msynch[0m
[93mM[PrintStmt, t_rc][0m = [96msynch[0m
[93mM[PrintStmt, t_int][0m = [96msynch[0m
[93mM[PrintStmt, t_for][0m = [96msynch[0m
[93mM[PrintRules, t_false][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_lp][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_string][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_char][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_id][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_hexadecimal][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_decimal][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_true][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_aop_pl][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_aop_mn][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_lop_not][0m = [96m[['Expression', 'PrintList']][0m
[93mM[PrintRules, t_rp][0m = [96msynch[0m
[93mM[PrintList, t_comma][0m = [96m[['t_comma', 'Expression', 'PrintList']][0m
[93mM[PrintList, t_rp][0m = [96m[['Îµ']][0m
[93mM[Expression, t_false][0m = [96m[['OrExp']][0m
[93mM[Expression, t_lp][0m = [96m[['OrExp']][0m
[93mM[Expression, t_string][0m = [96m[['OrExp']][0m
[93mM[Expression, t_char][0m = [96m[['OrExp']][0m
[93mM[Expression, t_id][0m = [96m[['OrExp']][0m
[93mM[Expression, t_hexadecimal][0m = [96m[['OrExp']][0m
[93mM[Expression, t_decimal][0m = [96m[['OrExp']][0m
[93mM[Expression, t_true][0m = [96m[['OrExp']][0m
[93mM[Expression, t_aop_pl][0m = [96m[['OrExp']][0m
[93mM[Expression, t_aop_mn][0m = [96m[['OrExp']][0m
[93mM[Expression, t_lop_not][0m = [96m[['OrExp']][0m
[93mM[Expression, t_rp][0m = [96msynch[0m
[93mM[Expression, t_semicolon][0m = [96msynch[0m
[93mM[Expression, t_rb][0m = [96msynch[0m
[93mM[Expression, t_lc][0m = [96msynch[0m
[93mM[Expression, t_comma][0m = [96msynch[0m
[93mM[OrExp, t_false][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_lp][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_string][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_char][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_id][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_hexadecimal][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_decimal][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_true][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_aop_pl][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_aop_mn][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_lop_not][0m = [96m[['AndExp', 'Or']][0m
[93mM[OrExp, t_rb][0m = [96msynch[0m
[93mM[OrExp, t_lc][0m = [96msynch[0m
[93mM[OrExp, t_semicolon][0m = [96msynch[0m
[93mM[OrExp, t_rp][0m = [96msynch[0m
[93mM[OrExp, t_comma][0m = [96msynch[0m
[93mM[Or, t_lop_or][0m = [96m[['t_lop_or', 'AndExp', 'Or']][0m
[93mM[Or, t_rb][0m = [96m[['Îµ']][0m
[93mM[Or, t_lc][0m = [96m[['Îµ']][0m
[93mM[Or, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[Or, t_rp][0m = [96m[['Îµ']][0m
[93mM[Or, t_comma][0m = [96m[['Îµ']][0m
[93mM[AndExp, t_false][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_lp][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_string][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_char][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_id][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_hexadecimal][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_decimal][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_true][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_aop_pl][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_aop_mn][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_lop_not][0m = [96m[['NotExp', 'And']][0m
[93mM[AndExp, t_rb][0m = [96msynch[0m
[93mM[AndExp, t_lop_or][0m = [96msynch[0m
[93mM[AndExp, t_lc][0m = [96msynch[0m
[93mM[AndExp, t_semicolon][0m = [96msynch[0m
[93mM[AndExp, t_rp][0m = [96msynch[0m
[93mM[AndExp, t_comma][0m = [96msynch[0m
[93mM[And, t_lop_and][0m = [96m[['t_lop_and', 'NotExp', 'And']][0m
[93mM[And, t_rb][0m = [96m[['Îµ']][0m
[93mM[And, t_lop_or][0m = [96m[['Îµ']][0m
[93mM[And, t_lc][0m = [96m[['Îµ']][0m
[93mM[And, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[And, t_rp][0m = [96m[['Îµ']][0m
[93mM[And, t_comma][0m = [96m[['Îµ']][0m
[93mM[NotExp, t_lop_not][0m = [96m[['t_lop_not', 'NotExp']][0m
[93mM[NotExp, t_false][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_lp][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_string][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_char][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_id][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_hexadecimal][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_decimal][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_true][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_aop_pl][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_aop_mn][0m = [96m[['CompExp']][0m
[93mM[NotExp, t_rb][0m = [96msynch[0m
[93mM[NotExp, t_lop_or][0m = [96msynch[0m
[93mM[NotExp, t_lc][0m = [96msynch[0m
[93mM[NotExp, t_lop_and][0m = [96msynch[0m
[93mM[NotExp, t_semicolon][0m = [96msynch[0m
[93mM[NotExp, t_rp][0m = [96msynch[0m
[93mM[NotExp, t_comma][0m = [96msynch[0m
[93mM[CompExp, t_false][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_lp][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_string][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_char][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_id][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_hexadecimal][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_decimal][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_true][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_aop_pl][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_aop_mn][0m = [96m[['Expr', 'Comp']][0m
[93mM[CompExp, t_rb][0m = [96msynch[0m
[93mM[CompExp, t_lop_or][0m = [96msynch[0m
[93mM[CompExp, t_lc][0m = [96msynch[0m
[93mM[CompExp, t_lop_and][0m = [96msynch[0m
[93mM[CompExp, t_semicolon][0m = [96msynch[0m
[93mM[CompExp, t_rp][0m = [96msynch[0m
[93mM[CompExp, t_comma][0m = [96msynch[0m
[93mM[Comp, t_rop_l][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rop_le][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rop_ge][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rop_g][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rop_e][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rop_ne][0m = [96m[['Comp_OP', 'Expr', 'Comp']][0m
[93mM[Comp, t_rb][0m = [96m[['Îµ']][0m
[93mM[Comp, t_lop_or][0m = [96m[['Îµ']][0m
[93mM[Comp, t_lc][0m = [96m[['Îµ']][0m
[93mM[Comp, t_lop_and][0m = [96m[['Îµ']][0m
[93mM[Comp, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[Comp, t_rp][0m = [96m[['Îµ']][0m
[93mM[Comp, t_comma][0m = [96m[['Îµ']][0m
[93mM[Comp_OP, t_rop_l][0m = [96m[['t_rop_l']][0m
[93mM[Comp_OP, t_rop_g][0m = [96m[['t_rop_g']][0m
[93mM[Comp_OP, t_rop_le][0m = [96m[['t_rop_le']][0m
[93mM[Comp_OP, t_rop_ge][0m = [96m[['t_rop_ge']][0m
[93mM[Comp_OP, t_rop_ne][0m = [96m[['t_rop_ne']][0m
[93mM[Comp_OP, t_rop_e][0m = [96m[['t_rop_e']][0m
[93mM[Comp_OP, t_false][0m = [96msynch[0m
[93mM[Comp_OP, t_string][0m = [96msynch[0m
[93mM[Comp_OP, t_char][0m = [96msynch[0m
[93mM[Comp_OP, t_id][0m = [96msynch[0m
[93mM[Comp_OP, t_lp][0m = [96msynch[0m
[93mM[Comp_OP, t_hexadecimal][0m = [96msynch[0m
[93mM[Comp_OP, t_decimal][0m = [96msynch[0m
[93mM[Comp_OP, t_true][0m = [96msynch[0m
[93mM[Comp_OP, t_aop_pl][0m = [96msynch[0m
[93mM[Comp_OP, t_aop_mn][0m = [96msynch[0m
[93mM[Expr, t_false][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_lp][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_string][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_char][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_id][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_hexadecimal][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_decimal][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_true][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_aop_pl][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_aop_mn][0m = [96m[['Term', 'Arth1']][0m
[93mM[Expr, t_rop_ge][0m = [96msynch[0m
[93mM[Expr, t_rb][0m = [96msynch[0m
[93mM[Expr, t_lop_or][0m = [96msynch[0m
[93mM[Expr, t_lc][0m = [96msynch[0m
[93mM[Expr, t_lop_and][0m = [96msynch[0m
[93mM[Expr, t_rop_l][0m = [96msynch[0m
[93mM[Expr, t_rop_ne][0m = [96msynch[0m
[93mM[Expr, t_rp][0m = [96msynch[0m
[93mM[Expr, t_comma][0m = [96msynch[0m
[93mM[Expr, t_rop_le][0m = [96msynch[0m
[93mM[Expr, t_rop_g][0m = [96msynch[0m
[93mM[Expr, t_semicolon][0m = [96msynch[0m
[93mM[Expr, t_rop_e][0m = [96msynch[0m
[93mM[Arth1, t_aop_pl][0m = [96m[['t_aop_pl', 'Term', 'Arth1']][0m
[93mM[Arth1, t_aop_mn][0m = [96m[['t_aop_mn', 'Term', 'Arth1']][0m
[93mM[Arth1, t_rop_ge][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rb][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_lop_or][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_lc][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_lop_and][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rop_l][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rop_ne][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rp][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_comma][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rop_le][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rop_g][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[Arth1, t_rop_e][0m = [96m[['Îµ']][0m
[93mM[Term, t_false][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_lp][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_string][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_char][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_id][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_hexadecimal][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_decimal][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_true][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_aop_pl][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_aop_mn][0m = [96m[['Factor', 'Arth2']][0m
[93mM[Term, t_rop_ge][0m = [96msynch[0m
[93mM[Term, t_rb][0m = [96msynch[0m
[93mM[Term, t_lop_or][0m = [96msynch[0m
[93mM[Term, t_lc][0m = [96msynch[0m
[93mM[Term, t_lop_and][0m = [96msynch[0m
[93mM[Term, t_rop_l][0m = [96msynch[0m
[93mM[Term, t_rop_ne][0m = [96msynch[0m
[93mM[Term, t_rp][0m = [96msynch[0m
[93mM[Term, t_comma][0m = [96msynch[0m
[93mM[Term, t_rop_le][0m = [96msynch[0m
[93mM[Term, t_rop_g][0m = [96msynch[0m
[93mM[Term, t_semicolon][0m = [96msynch[0m
[93mM[Term, t_rop_e][0m = [96msynch[0m
[93mM[Arth2, t_aop_ml][0m = [96m[['t_aop_ml', 'Factor', 'Arth2']][0m
[93mM[Arth2, t_aop_dv][0m = [96m[['t_aop_dv', 'Factor', 'Arth2']][0m
[93mM[Arth2, t_aop_rm][0m = [96m[['t_aop_rm', 'Factor', 'Arth2']][0m
[93mM[Arth2, t_rop_ge][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rb][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_lop_or][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_lc][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_lop_and][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rop_l][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rop_ne][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rp][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_comma][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rop_le][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rop_g][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_aop_pl][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_rop_e][0m = [96m[['Îµ']][0m
[93mM[Arth2, t_aop_mn][0m = [96m[['Îµ']][0m
[93mM[Factor, t_aop_pl][0m = [96m[['t_aop_pl', 'Atom']][0m
[93mM[Factor, t_aop_mn][0m = [96m[['t_aop_mn', 'Atom']][0m
[93mM[Factor, t_false][0m = [96m[['Atom']][0m
[93mM[Factor, t_lp][0m = [96m[['Atom']][0m
[93mM[Factor, t_string][0m = [96m[['Atom']][0m
[93mM[Factor, t_char][0m = [96m[['Atom']][0m
[93mM[Factor, t_id][0m = [96m[['Atom']][0m
[93mM[Factor, t_hexadecimal][0m = [96m[['Atom']][0m
[93mM[Factor, t_decimal][0m = [96m[['Atom']][0m
[93mM[Factor, t_true][0m = [96m[['Atom']][0m
[93mM[Factor, t_aop_dv][0m = [96msynch[0m
[93mM[Factor, t_rop_ge][0m = [96msynch[0m
[93mM[Factor, t_rb][0m = [96msynch[0m
[93mM[Factor, t_lop_or][0m = [96msynch[0m
[93mM[Factor, t_lc][0m = [96msynch[0m
[93mM[Factor, t_aop_rm][0m = [96msynch[0m
[93mM[Factor, t_lop_and][0m = [96msynch[0m
[93mM[Factor, t_rop_l][0m = [96msynch[0m
[93mM[Factor, t_aop_ml][0m = [96msynch[0m
[93mM[Factor, t_rop_ne][0m = [96msynch[0m
[93mM[Factor, t_rp][0m = [96msynch[0m
[93mM[Factor, t_comma][0m = [96msynch[0m
[93mM[Factor, t_rop_le][0m = [96msynch[0m
[93mM[Factor, t_rop_g][0m = [96msynch[0m
[93mM[Factor, t_semicolon][0m = [96msynch[0m
[93mM[Factor, t_rop_e][0m = [96msynch[0m
[93mM[Atom, t_id][0m = [96m[['t_id', 'IsFunction']][0m
[93mM[Atom, t_decimal][0m = [96m[['t_decimal']][0m
[93mM[Atom, t_hexadecimal][0m = [96m[['t_hexadecimal']][0m
[93mM[Atom, t_string][0m = [96m[['t_string']][0m
[93mM[Atom, t_char][0m = [96m[['t_char']][0m
[93mM[Atom, t_true][0m = [96m[['t_true']][0m
[93mM[Atom, t_false][0m = [96m[['t_false']][0m
[93mM[Atom, t_lp][0m = [96m[['t_lp', 'Expression', 't_rp']][0m
[93mM[Atom, t_aop_dv][0m = [96msynch[0m
[93mM[Atom, t_rop_ge][0m = [96msynch[0m
[93mM[Atom, t_rb][0m = [96msynch[0m
[93mM[Atom, t_lop_or][0m = [96msynch[0m
[93mM[Atom, t_lc][0m = [96msynch[0m
[93mM[Atom, t_aop_rm][0m = [96msynch[0m
[93mM[Atom, t_lop_and][0m = [96msynch[0m
[93mM[Atom, t_rop_l][0m = [96msynch[0m
[93mM[Atom, t_aop_ml][0m = [96msynch[0m
[93mM[Atom, t_rop_ne][0m = [96msynch[0m
[93mM[Atom, t_rp][0m = [96msynch[0m
[93mM[Atom, t_comma][0m = [96msynch[0m
[93mM[Atom, t_rop_le][0m = [96msynch[0m
[93mM[Atom, t_rop_g][0m = [96msynch[0m
[93mM[Atom, t_aop_pl][0m = [96msynch[0m
[93mM[Atom, t_semicolon][0m = [96msynch[0m
[93mM[Atom, t_rop_e][0m = [96msynch[0m
[93mM[Atom, t_aop_mn][0m = [96msynch[0m
[93mM[IsFunction, t_aop_dv][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_ge][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rb][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_lop_or][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_lc][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_aop_rm][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_lop_and][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_l][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_aop_ml][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_ne][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rp][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_comma][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_le][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_g][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_aop_pl][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_semicolon][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_rop_e][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_aop_mn][0m = [96m[['Îµ']][0m
[93mM[IsFunction, t_lp][0m = [96m[['t_lp', 'Parameters2', 't_rp']][0m
[93mM[Parameters2, t_id][0m = [96m[['ParameterList2']][0m
[93mM[Parameters2, t_rp][0m = [96m[['Îµ']][0m
[93mM[ParameterList2, t_id][0m = [96m[['t_id', "ParameterList2'"]][0m
[93mM[ParameterList2, t_rp][0m = [96msynch[0m
[93mM[ParameterList2', t_comma][0m = [96m[['t_comma', 't_id', 'Array', "ParameterList2'"]][0m
[93mM[ParameterList2', t_rp][0m = [96m[['Îµ']][0m
[94m-------------------
-------------------[0m

[94mParse Tree:[0m
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', 'Program']
Current Token: <t_int, 1, None>
Action: Program -> ['Declist']
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', 'Declist']
Current Token: <t_int, 1, None>
Action: Declist -> ['Dec', "Declist'"]
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Dec']
Current Token: <t_int, 1, None>
Action: Dec -> ['Type', 't_id', 'Declaration']
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id', 'Type']
Current Token: <t_int, 1, None>
Action: Type -> ['t_int']
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id', 't_int']
Current Token: <t_int, 1, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id']
Current Token: <t_id, 1, 'test_function'>
Matched Token: T_ID, Value: test_function
Current Token 2: <t_lp, 1, '('>
-----------
Stack: ['$', "Declist'", 'Declaration']
Current Token: <t_lp, 1, '('>
Action: Declaration -> ['Funcdec']
Current Token 2: <t_lp, 1, '('>
-----------
Stack: ['$', "Declist'", 'Funcdec']
Current Token: <t_lp, 1, '('>
Action: Funcdec -> ['t_lp', 'Parameters', 't_rp', 'Statement']
Current Token 2: <t_lp, 1, '('>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', 'Parameters', 't_lp']
Current Token: <t_lp, 1, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', 'Parameters']
Current Token: <t_int, 1, None>
Action: Parameters -> ['ParameterList']
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', 'ParameterList']
Current Token: <t_int, 1, None>
Action: ParameterList -> ['t_int', 't_id', "ParameterList'"]
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 't_id', 't_int']
Current Token: <t_int, 1, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 't_id']
Current Token: <t_id, 1, 'a'>
Matched Token: T_ID, Value: a
Current Token 2: <t_comma, 1, ','>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'"]
Current Token: <t_comma, 1, ','>
Action: ParameterList' -> ['t_comma', 'Type', 't_id', 'Array', "ParameterList'"]
Current Token 2: <t_comma, 1, ','>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 'Type', 't_comma']
Current Token: <t_comma, 1, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 'Type']
Current Token: <t_int, 1, None>
Action: Type -> ['t_int']
Current Token 2: <t_int, 1, None>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 't_int']
Current Token: <t_int, 1, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id']
Current Token: <t_id, 1, 'b'>
Matched Token: T_ID, Value: b
Current Token 2: <t_comma, 1, ','>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array']
Current Token: <t_comma, 1, ','>
Action: Array -> ['Îµ']
Current Token 2: <t_comma, 1, ','>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'"]
Current Token: <t_comma, 1, ','>
Action: ParameterList' -> ['t_comma', 'Type', 't_id', 'Array', "ParameterList'"]
Current Token 2: <t_comma, 1, ','>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 'Type', 't_comma']
Current Token: <t_comma, 1, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 'Type']
Current Token: <t_bool, 1, None>
Action: Type -> ['t_bool']
Current Token 2: <t_bool, 1, None>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id', 't_bool']
Current Token: <t_bool, 1, None>
Matched Token: T_BOOL, Value: None
Current Token 2: <t_whitespace, 1, ' '>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array', 't_id']
Current Token: <t_id, 1, 'c'>
Matched Token: T_ID, Value: c
Current Token 2: <t_rp, 1, ')'>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'", 'Array']
Current Token: <t_rp, 1, ')'>
Action: Array -> ['Îµ']
Current Token 2: <t_rp, 1, ')'>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', "ParameterList'"]
Current Token: <t_rp, 1, ')'>
Action: ParameterList' -> ['Îµ']
Current Token 2: <t_rp, 1, ')'>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp']
Current Token: <t_rp, 1, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_lc, 1, '{'>
-----------
Stack: ['$', "Declist'", 'Statement']
Current Token: <t_lc, 1, '{'>
Action: Statement -> ['CompoundStmt']
Current Token 2: <t_lc, 1, '{'>
-----------
Stack: ['$', "Declist'", 'CompoundStmt']
Current Token: <t_lc, 1, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 1, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 1, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 1, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_if, 3, None>
Action: StatementList -> ['IfStmt', 'StatementList']
Current Token 2: <t_if, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'IfStmt']
Current Token: <t_if, 3, None>
Action: IfStmt -> ['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']
Current Token 2: <t_if, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression', 't_if']
Current Token: <t_if, 3, None>
Matched Token: T_IF, Value: None
Current Token 2: <t_whitespace, 3, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression']
Current Token: <t_lp, 3, '('>
Action: Expression -> ['OrExp']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'OrExp']
Current Token: <t_lp, 3, '('>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'AndExp']
Current Token: <t_lp, 3, '('>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 3, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 3, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 3, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 3, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 3, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 3, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 3, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 3, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_id, 3, 'c'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_id, 3, 'c'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 3, 'c'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 3, 'c'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 3, 'c'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 3, 'c'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 3, 'c'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 3, 'c'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 3, 'c'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 3, 'c'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 3, 'c'>
Matched Token: T_ID, Value: c
Current Token 2: <t_whitespace, 3, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_e, 3, '=='>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_e, 3, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_e, 3, '=='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_e, 3, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_e, 3, '=='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_e, 3, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_e, 3, '=='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_e, 3, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_e, 3, '=='>
Action: Comp_OP -> ['t_rop_e']
Current Token 2: <t_rop_e, 3, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_e']
Current Token: <t_rop_e, 3, '=='>
Matched Token: T_ROP_E, Value: ==
Current Token 2: <t_whitespace, 3, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_true, 3, None>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_true, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_true, 3, None>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_true, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_true, 3, None>
Action: Factor -> ['Atom']
Current Token 2: <t_true, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_true, 3, None>
Action: Atom -> ['t_true']
Current Token 2: <t_true, 3, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_true']
Current Token: <t_true, 3, None>
Matched Token: T_TRUE, Value: None
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 3, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 3, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 3, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 3, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 3, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 3, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 3, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_lc, 3, '{'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_lc, 3, '{'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp']
Current Token: <t_lc, 3, '{'>
Action: Comp -> ['Îµ']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And']
Current Token: <t_lc, 3, '{'>
Action: And -> ['Îµ']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or']
Current Token: <t_lc, 3, '{'>
Action: Or -> ['Îµ']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt']
Current Token: <t_lc, 3, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 3, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 3, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 3, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_return, 4, None>
Action: StatementList -> ['ReturnStmt', 'StatementList']
Current Token 2: <t_return, 4, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 'ReturnStmt']
Current Token: <t_return, 4, None>
Action: ReturnStmt -> ['t_return', 'ReturnStmt1']
Current Token 2: <t_return, 4, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 'ReturnStmt1', 't_return']
Current Token: <t_return, 4, None>
Matched Token: T_RETURN, Value: None
Current Token 2: <t_whitespace, 4, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 'ReturnStmt1']
Current Token: <t_id, 4, 'a'>
Action: ReturnStmt1 -> ['Expression', 't_semicolon']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Expression']
Current Token: <t_id, 4, 'a'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'OrExp']
Current Token: <t_id, 4, 'a'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_id, 4, 'a'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_id, 4, 'a'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_id, 4, 'a'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 4, 'a'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 4, 'a'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 4, 'a'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 4, 'a'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 4, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 4, 'a'>
Matched Token: T_ID, Value: a
Current Token 2: <t_aop_pl, 4, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_pl, 4, '+'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_pl, 4, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_pl, 4, '+'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_pl, 4, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_pl, 4, '+'>
Action: Arth1 -> ['t_aop_pl', 'Term', 'Arth1']
Current Token 2: <t_aop_pl, 4, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_pl']
Current Token: <t_aop_pl, 4, '+'>
Matched Token: T_AOP_PL, Value: +
Current Token 2: <t_id, 4, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 4, 'b'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 4, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 4, 'b'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 4, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 4, 'b'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 4, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 4, 'b'>
Matched Token: T_ID, Value: b
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_semicolon, 4, ';'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 4, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 4, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 4, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 4, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 'Or']
Current Token: <t_semicolon, 4, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 4, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 4, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 4, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_rc, 5, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 5, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt', 't_rc']
Current Token: <t_rc, 5, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 5, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'ElseStmt']
Current Token: <t_else, 6, None>
Action: ElseStmt -> ['t_else', 'CompoundStmt']
Current Token 2: <t_else, 6, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'CompoundStmt', 't_else']
Current Token: <t_else, 6, None>
Matched Token: T_ELSE, Value: None
Current Token 2: <t_whitespace, 6, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'CompoundStmt']
Current Token: <t_lc, 6, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 6, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 6, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 6, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_return, 7, None>
Action: StatementList -> ['ReturnStmt', 'StatementList']
Current Token 2: <t_return, 7, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 'ReturnStmt']
Current Token: <t_return, 7, None>
Action: ReturnStmt -> ['t_return', 'ReturnStmt1']
Current Token 2: <t_return, 7, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 'ReturnStmt1', 't_return']
Current Token: <t_return, 7, None>
Matched Token: T_RETURN, Value: None
Current Token 2: <t_whitespace, 7, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 'ReturnStmt1']
Current Token: <t_id, 7, 'a'>
Action: ReturnStmt1 -> ['Expression', 't_semicolon']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Expression']
Current Token: <t_id, 7, 'a'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'OrExp']
Current Token: <t_id, 7, 'a'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_id, 7, 'a'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_id, 7, 'a'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_id, 7, 'a'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 7, 'a'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 7, 'a'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 7, 'a'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 7, 'a'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 7, 'a'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 7, 'a'>
Matched Token: T_ID, Value: a
Current Token 2: <t_aop_mn, 7, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_mn, 7, '-'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_mn, 7, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_mn, 7, '-'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_mn, 7, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_mn, 7, '-'>
Action: Arth1 -> ['t_aop_mn', 'Term', 'Arth1']
Current Token 2: <t_aop_mn, 7, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_mn']
Current Token: <t_aop_mn, 7, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_id, 7, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 7, 'b'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 7, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 7, 'b'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 7, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 7, 'b'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 7, 'b'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 7, 'b'>
Matched Token: T_ID, Value: b
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_semicolon, 7, ';'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 7, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 7, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 7, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 7, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 'Or']
Current Token: <t_semicolon, 7, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 7, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 7, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 7, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_rc, 8, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 8, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc']
Current Token: <t_rc, 8, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 8, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_rc, 9, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 9, '}'>
-----------
Stack: ['$', "Declist'", 't_rc']
Current Token: <t_rc, 9, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 9, '\n'>
-----------
Stack: ['$', "Declist'"]
Current Token: <t_int, 11, None>
Action: Declist' -> ['Dec', "Declist'"]
Current Token 2: <t_int, 11, None>
-----------
Stack: ['$', "Declist'", 'Dec']
Current Token: <t_int, 11, None>
Action: Dec -> ['Type', 't_id', 'Declaration']
Current Token 2: <t_int, 11, None>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id', 'Type']
Current Token: <t_int, 11, None>
Action: Type -> ['t_int']
Current Token 2: <t_int, 11, None>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id', 't_int']
Current Token: <t_int, 11, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 11, ' '>
-----------
Stack: ['$', "Declist'", 'Declaration', 't_id']
Current Token: <t_id, 11, 'main'>
Matched Token: T_ID, Value: main
Current Token 2: <t_lp, 11, '('>
-----------
Stack: ['$', "Declist'", 'Declaration']
Current Token: <t_lp, 11, '('>
Action: Declaration -> ['Funcdec']
Current Token 2: <t_lp, 11, '('>
-----------
Stack: ['$', "Declist'", 'Funcdec']
Current Token: <t_lp, 11, '('>
Action: Funcdec -> ['t_lp', 'Parameters', 't_rp', 'Statement']
Current Token 2: <t_lp, 11, '('>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', 'Parameters', 't_lp']
Current Token: <t_lp, 11, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_rp, 11, ')'>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp', 'Parameters']
Current Token: <t_rp, 11, ')'>
Action: Parameters -> ['Îµ']
Current Token 2: <t_rp, 11, ')'>
-----------
Stack: ['$', "Declist'", 'Statement', 't_rp']
Current Token: <t_rp, 11, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_lc, 11, '{'>
-----------
Stack: ['$', "Declist'", 'Statement']
Current Token: <t_lc, 11, '{'>
Action: Statement -> ['CompoundStmt']
Current Token 2: <t_lc, 11, '{'>
-----------
Stack: ['$', "Declist'", 'CompoundStmt']
Current Token: <t_lc, 11, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 11, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 11, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 11, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_bool, 12, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_bool, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_bool, 12, None>
Action: VardecStmt -> ['t_bool', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_bool, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_bool']
Current Token: <t_bool, 12, None>
Matched Token: T_BOOL, Value: None
Current Token 2: <t_whitespace, 12, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 12, 'add'>
Matched Token: T_ID, Value: add
Current Token 2: <t_whitespace, 12, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_assign, 12, '='>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_assign, 12, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_assign, 12, '='>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_assign, 12, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_assign, 12, '='>
Action: Array -> ['Îµ']
Current Token 2: <t_assign, 12, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 12, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 12, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 12, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 12, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_true, 12, None>
Action: Expression -> ['OrExp']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_true, 12, None>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_true, 12, None>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_true, 12, None>
Action: NotExp -> ['CompExp']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_true, 12, None>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_true, 12, None>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_true, 12, None>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_true, 12, None>
Action: Factor -> ['Atom']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_true, 12, None>
Action: Atom -> ['t_true']
Current Token 2: <t_true, 12, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_true']
Current Token: <t_true, 12, None>
Matched Token: T_TRUE, Value: None
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 12, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 12, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 12, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 12, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 12, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 12, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 12, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 12, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 12, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_char, 13, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_char, 13, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_char, 13, None>
Action: VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_char, 13, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_char']
Current Token: <t_char, 13, None>
Matched Token: T_CHAR, Value: None
Current Token 2: <t_whitespace, 13, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 13, '_assign1'>
Matched Token: T_ID, Value: _assign1
Current Token 2: <t_whitespace, 13, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_assign, 13, '='>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_assign, 13, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_assign, 13, '='>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_assign, 13, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_assign, 13, '='>
Action: Array -> ['Îµ']
Current Token 2: <t_assign, 13, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 13, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 13, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 13, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 13, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_char, 13, "'='">
Action: Expression -> ['OrExp']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_char, 13, "'='">
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_char, 13, "'='">
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_char, 13, "'='">
Action: NotExp -> ['CompExp']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_char, 13, "'='">
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_char, 13, "'='">
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_char, 13, "'='">
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_char, 13, "'='">
Action: Factor -> ['Atom']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_char, 13, "'='">
Action: Atom -> ['t_char']
Current Token 2: <t_char, 13, "'='">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_char']
Current Token: <t_char, 13, "'='">
Matched Token: T_CHAR, Value: '='
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 13, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 13, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 13, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 13, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 13, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 13, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 13, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 13, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 13, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_char, 14, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_char, 14, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_char, 14, None>
Action: VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_char, 14, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_char']
Current Token: <t_char, 14, None>
Matched Token: T_CHAR, Value: None
Current Token 2: <t_whitespace, 14, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 14, 'String_1'>
Matched Token: T_ID, Value: String_1
Current Token 2: <t_lb, 14, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_lb, 14, '['>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_lb, 14, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_lb, 14, '['>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_lb, 14, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_lb, 14, '['>
Action: Array -> ['t_lb', 'Arraysize', 't_rb']
Current Token 2: <t_lb, 14, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb', 'Arraysize', 't_lb']
Current Token: <t_lb, 14, '['>
Matched Token: T_LB, Value: [
Current Token 2: <t_rb, 14, ']'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb', 'Arraysize']
Current Token: <t_rb, 14, ']'>
Action: Arraysize -> ['Îµ']
Current Token 2: <t_rb, 14, ']'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb']
Current Token: <t_rb, 14, ']'>
Matched Token: T_RB, Value: ]
Current Token 2: <t_whitespace, 14, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 14, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 14, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 14, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 14, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_string, 14, '" + "'>
Action: Expression -> ['OrExp']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_string, 14, '" + "'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_string, 14, '" + "'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_string, 14, '" + "'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_string, 14, '" + "'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_string, 14, '" + "'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_string, 14, '" + "'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_string, 14, '" + "'>
Action: Factor -> ['Atom']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_string, 14, '" + "'>
Action: Atom -> ['t_string']
Current Token 2: <t_string, 14, '" + "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_string']
Current Token: <t_string, 14, '" + "'>
Matched Token: T_STRING, Value: " + "
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 14, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 14, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 14, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 14, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 14, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 14, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 14, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 14, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 14, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_char, 15, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_char, 15, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_char, 15, None>
Action: VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_char, 15, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_char']
Current Token: <t_char, 15, None>
Matched Token: T_CHAR, Value: None
Current Token 2: <t_whitespace, 15, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 15, 'String_2'>
Matched Token: T_ID, Value: String_2
Current Token 2: <t_lb, 15, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_lb, 15, '['>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_lb, 15, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_lb, 15, '['>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_lb, 15, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_lb, 15, '['>
Action: Array -> ['t_lb', 'Arraysize', 't_rb']
Current Token 2: <t_lb, 15, '['>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb', 'Arraysize', 't_lb']
Current Token: <t_lb, 15, '['>
Matched Token: T_LB, Value: [
Current Token 2: <t_rb, 15, ']'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb', 'Arraysize']
Current Token: <t_rb, 15, ']'>
Action: Arraysize -> ['Îµ']
Current Token 2: <t_rb, 15, ']'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 't_rb']
Current Token: <t_rb, 15, ']'>
Matched Token: T_RB, Value: ]
Current Token 2: <t_whitespace, 15, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 15, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 15, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 15, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 15, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_string, 15, '" - "'>
Action: Expression -> ['OrExp']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_string, 15, '" - "'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_string, 15, '" - "'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_string, 15, '" - "'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_string, 15, '" - "'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_string, 15, '" - "'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_string, 15, '" - "'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_string, 15, '" - "'>
Action: Factor -> ['Atom']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_string, 15, '" - "'>
Action: Atom -> ['t_string']
Current Token 2: <t_string, 15, '" - "'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_string']
Current Token: <t_string, 15, '" - "'>
Matched Token: T_STRING, Value: " - "
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 15, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 15, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 15, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 15, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 15, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 15, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 15, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 15, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 15, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_for, 16, None>
Action: StatementList -> ['LoopStmt', 'StatementList']
Current Token 2: <t_for, 16, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'LoopStmt']
Current Token: <t_for, 16, None>
Action: LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
Current Token 2: <t_for, 16, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp', 't_for']
Current Token: <t_for, 16, None>
Matched Token: T_FOR, Value: None
Current Token 2: <t_lp, 16, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp']
Current Token: <t_lp, 16, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_int, 16, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt']
Current Token: <t_int, 16, None>
Action: ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
Current Token 2: <t_int, 16, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopVardec']
Current Token: <t_int, 16, None>
Action: LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
Current Token 2: <t_int, 16, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id', 't_int']
Current Token: <t_int, 16, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id']
Current Token: <t_id, 16, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign']
Current Token: <t_assign, 16, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression']
Current Token: <t_decimal, 16, '0'>
Action: Expression -> ['OrExp']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'OrExp']
Current Token: <t_decimal, 16, '0'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_decimal, 16, '0'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_decimal, 16, '0'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_decimal, 16, '0'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 16, '0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 16, '0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 16, '0'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 16, '0'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 16, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 16, '0'>
Matched Token: T_DECIMAL, Value: 0
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 16, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 16, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 16, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 16, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or']
Current Token: <t_semicolon, 16, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon']
Current Token: <t_semicolon, 16, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr']
Current Token: <t_id, 16, 'i'>
Action: LoopExpr -> ['Expression']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Expression']
Current Token: <t_id, 16, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'OrExp']
Current Token: <t_id, 16, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_id, 16, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_id, 16, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_id, 16, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 16, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 16, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 16, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 16, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 16, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_le, 16, '<='>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_le, 16, '<='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_le, 16, '<='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_le, 16, '<='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_le, 16, '<='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_le, 16, '<='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_rop_le, 16, '<='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_le, 16, '<='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_le, 16, '<='>
Action: Comp_OP -> ['t_rop_le']
Current Token 2: <t_rop_le, 16, '<='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 't_rop_le']
Current Token: <t_rop_le, 16, '<='>
Matched Token: T_ROP_LE, Value: <=
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 16, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 16, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 16, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 16, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 16, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 16, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 16, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 16, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 16, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_aop_pl, 16, '+'>
Action: Expression -> ['OrExp']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_aop_pl, 16, '+'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_aop_pl, 16, '+'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_aop_pl, 16, '+'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_aop_pl, 16, '+'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_aop_pl, 16, '+'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_aop_pl, 16, '+'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_aop_pl, 16, '+'>
Action: Factor -> ['t_aop_pl', 'Atom']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom', 't_aop_pl']
Current Token: <t_aop_pl, 16, '+'>
Matched Token: T_AOP_PL, Value: +
Current Token 2: <t_decimal, 16, '10'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 16, '10'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 16, '10'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 16, '10'>
Matched Token: T_DECIMAL, Value: 10
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_dv, 16, '/'>
Action: Arth2 -> ['t_aop_dv', 'Factor', 'Arth2']
Current Token 2: <t_aop_dv, 16, '/'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor', 't_aop_dv']
Current Token: <t_aop_dv, 16, '/'>
Matched Token: T_AOP_DV, Value: /
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 16, '2'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 16, '2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 16, '2'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 16, '2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 16, '2'>
Matched Token: T_DECIMAL, Value: 2
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 16, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 16, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 16, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 16, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 16, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 16, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 16, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 16, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 16, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 16, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or']
Current Token: <t_semicolon, 16, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 16, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon']
Current Token: <t_semicolon, 16, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep']
Current Token: <t_id, 16, 'i'>
Action: LoopStep -> ['SimpleStmt2']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'SimpleStmt2']
Current Token: <t_id, 16, 'i'>
Action: SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2', 't_id']
Current Token: <t_id, 16, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2']
Current Token: <t_assign, 16, '='>
Action: Array2 -> ['Îµ']
Current Token 2: <t_assign, 16, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign']
Current Token: <t_assign, 16, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression']
Current Token: <t_id, 16, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'OrExp']
Current Token: <t_id, 16, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 16, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 16, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 16, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 16, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 16, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 16, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 16, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 16, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 16, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_pl, 16, '+'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_pl, 16, '+'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_pl, 16, '+'>
Action: Arth1 -> ['t_aop_pl', 'Term', 'Arth1']
Current Token 2: <t_aop_pl, 16, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_pl']
Current Token: <t_aop_pl, 16, '+'>
Matched Token: T_AOP_PL, Value: +
Current Token 2: <t_whitespace, 16, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 16, '1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 16, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 16, '1'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 16, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 16, '1'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 16, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 16, '1'>
Matched Token: T_DECIMAL, Value: 1
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 16, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 16, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 16, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And']
Current Token: <t_rp, 16, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or']
Current Token: <t_rp, 16, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 16, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp']
Current Token: <t_rp, 16, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_lc, 16, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_lc, 16, '{'>
Action: StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
Current Token 2: <t_lc, 16, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 16, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 16, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_for, 17, None>
Action: StatementList -> ['LoopStmt', 'StatementList']
Current Token 2: <t_for, 17, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 'LoopStmt']
Current Token: <t_for, 17, None>
Action: LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
Current Token 2: <t_for, 17, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp', 't_for']
Current Token: <t_for, 17, None>
Matched Token: T_FOR, Value: None
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp']
Current Token: <t_lp, 17, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_int, 17, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt']
Current Token: <t_int, 17, None>
Action: ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
Current Token 2: <t_int, 17, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopVardec']
Current Token: <t_int, 17, None>
Action: LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
Current Token 2: <t_int, 17, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id', 't_int']
Current Token: <t_int, 17, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id']
Current Token: <t_id, 17, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign']
Current Token: <t_assign, 17, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: Expression -> ['OrExp']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'OrExp']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: Factor -> ['Atom']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_hexadecimal, 17, '0x0'>
Action: Atom -> ['t_hexadecimal']
Current Token 2: <t_hexadecimal, 17, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_hexadecimal']
Current Token: <t_hexadecimal, 17, '0x0'>
Matched Token: T_HEXADECIMAL, Value: 0x0
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 17, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 17, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 17, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 17, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or']
Current Token: <t_semicolon, 17, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon']
Current Token: <t_semicolon, 17, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr']
Current Token: <t_id, 17, 'j'>
Action: LoopExpr -> ['Expression']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Expression']
Current Token: <t_id, 17, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'OrExp']
Current Token: <t_id, 17, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_id, 17, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_id, 17, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_id, 17, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 17, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 17, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 17, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 17, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 17, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_ne, 17, '!='>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_ne, 17, '!='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_ne, 17, '!='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_ne, 17, '!='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_ne, 17, '!='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_ne, 17, '!='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_rop_ne, 17, '!='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_ne, 17, '!='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_ne, 17, '!='>
Action: Comp_OP -> ['t_rop_ne']
Current Token 2: <t_rop_ne, 17, '!='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 't_rop_ne']
Current Token: <t_rop_ne, 17, '!='>
Matched Token: T_ROP_NE, Value: !=
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 17, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 17, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 17, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 17, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 17, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 17, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 17, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 17, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 17, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_decimal, 17, '5'>
Action: Expression -> ['OrExp']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_decimal, 17, '5'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_decimal, 17, '5'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_decimal, 17, '5'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_decimal, 17, '5'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 17, '5'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 17, '5'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 17, '5'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 17, '5'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 17, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 17, '5'>
Matched Token: T_DECIMAL, Value: 5
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_ml, 17, '*'>
Action: Arth2 -> ['t_aop_ml', 'Factor', 'Arth2']
Current Token 2: <t_aop_ml, 17, '*'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor', 't_aop_ml']
Current Token: <t_aop_ml, 17, '*'>
Matched Token: T_AOP_ML, Value: *
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_aop_mn, 17, '-'>
Action: Factor -> ['t_aop_mn', 'Atom']
Current Token 2: <t_aop_mn, 17, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom', 't_aop_mn']
Current Token: <t_aop_mn, 17, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_decimal, 17, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 17, '1'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 17, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 17, '1'>
Matched Token: T_DECIMAL, Value: 1
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 17, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 17, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 17, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 17, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 17, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 17, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 17, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 17, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 17, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 17, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or']
Current Token: <t_semicolon, 17, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 17, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon']
Current Token: <t_semicolon, 17, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep']
Current Token: <t_id, 17, 'j'>
Action: LoopStep -> ['SimpleStmt2']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'SimpleStmt2']
Current Token: <t_id, 17, 'j'>
Action: SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2', 't_id']
Current Token: <t_id, 17, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2']
Current Token: <t_assign, 17, '='>
Action: Array2 -> ['Îµ']
Current Token 2: <t_assign, 17, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign']
Current Token: <t_assign, 17, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression']
Current Token: <t_id, 17, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'OrExp']
Current Token: <t_id, 17, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 17, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 17, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 17, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 17, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 17, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 17, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 17, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 17, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 17, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_mn, 17, '-'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_mn, 17, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_mn, 17, '-'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_mn, 17, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_mn, 17, '-'>
Action: Arth1 -> ['t_aop_mn', 'Term', 'Arth1']
Current Token 2: <t_aop_mn, 17, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_mn']
Current Token: <t_aop_mn, 17, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_whitespace, 17, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 17, '1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 17, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 17, '1'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 17, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 17, '1'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 17, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 17, '1'>
Matched Token: T_DECIMAL, Value: 1
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 17, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 17, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 17, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And']
Current Token: <t_rp, 17, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or']
Current Token: <t_rp, 17, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 17, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp']
Current Token: <t_rp, 17, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_lc, 17, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_lc, 17, '{'>
Action: StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
Current Token 2: <t_lc, 17, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 17, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 17, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 18, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 18, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 18, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 18, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 18, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 18, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 18, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 18, 'i'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 18, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 18, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 18, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 18, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 18, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 18, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 18, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 18, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 18, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 18, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 18, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 18, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 18, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 18, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 18, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 18, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 18, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 18, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 18, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 18, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 18, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 18, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 18, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 19, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 19, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 19, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 19, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 19, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 19, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 19, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 19, 'String_1'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 19, 'String_1'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 19, 'String_1'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 19, 'String_1'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 19, 'String_1'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 19, 'String_1'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 19, 'String_1'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 19, 'String_1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 19, 'String_1'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 19, 'String_1'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 19, 'String_1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 19, 'String_1'>
Matched Token: T_ID, Value: String_1
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 19, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 19, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 19, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 19, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 19, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 19, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 19, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 19, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 19, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 19, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 19, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 19, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 20, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 20, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 20, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 20, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 20, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 20, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 20, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 20, 'j'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 20, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 20, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 20, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 20, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 20, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 20, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 20, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 20, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 20, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 20, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 20, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 20, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 20, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 20, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 20, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 20, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 20, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 20, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 20, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 20, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 20, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 20, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 20, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 21, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 21, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 21, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 21, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 21, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 21, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 21, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 21, '_assign1'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 21, '_assign1'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 21, '_assign1'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 21, '_assign1'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 21, '_assign1'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 21, '_assign1'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 21, '_assign1'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 21, '_assign1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 21, '_assign1'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 21, '_assign1'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 21, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 21, '_assign1'>
Matched Token: T_ID, Value: _assign1
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 21, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 21, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 21, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 21, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 21, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 21, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 21, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 21, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 21, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 21, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 21, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 21, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 22, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 22, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 22, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 22, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 22, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 22, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 22, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 22, 'test_function'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 22, 'test_function'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 22, 'test_function'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 22, 'test_function'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 22, 'test_function'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 22, 'test_function'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 22, 'test_function'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 22, 'test_function'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 22, 'test_function'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 22, 'test_function'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 22, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 22, 'test_function'>
Matched Token: T_ID, Value: test_function
Current Token 2: <t_lp, 22, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_lp, 22, '('>
Action: IsFunction -> ['t_lp', 'Parameters2', 't_rp']
Current Token 2: <t_lp, 22, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Parameters2', 't_lp']
Current Token: <t_lp, 22, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 22, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Parameters2']
Current Token: <t_id, 22, 'i'>
Action: Parameters2 -> ['ParameterList2']
Current Token 2: <t_id, 22, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'ParameterList2']
Current Token: <t_id, 22, 'i'>
Action: ParameterList2 -> ['t_id', "ParameterList2'"]
Current Token 2: <t_id, 22, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 't_id']
Current Token: <t_id, 22, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_comma, 22, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_comma, 22, ','>
Action: ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
Current Token 2: <t_comma, 22, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id', 't_comma']
Current Token: <t_comma, 22, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_id, 22, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id']
Current Token: <t_id, 22, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_comma, 22, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array']
Current Token: <t_comma, 22, ','>
Action: Array -> ['Îµ']
Current Token 2: <t_comma, 22, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_comma, 22, ','>
Action: ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
Current Token 2: <t_comma, 22, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id', 't_comma']
Current Token: <t_comma, 22, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_id, 22, 'add'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id']
Current Token: <t_id, 22, 'add'>
Matched Token: T_ID, Value: add
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array']
Current Token: <t_rp, 22, ')'>
Action: Array -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_rp, 22, ')'>
Action: ParameterList2' -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 22, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 22, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 22, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 22, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 22, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 22, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 22, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 22, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 22, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 22, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 22, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 22, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_rc, 23, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 23, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc']
Current Token: <t_rc, 23, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 23, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_rc, 24, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 24, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc']
Current Token: <t_rc, 24, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 24, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_id, 25, 'add'>
Action: StatementList -> ['SimpleStmt', 'StatementList']
Current Token 2: <t_id, 25, 'add'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'SimpleStmt']
Current Token: <t_id, 25, 'add'>
Action: SimpleStmt -> ['t_id', 'Array2', 't_assign', 'Expression', 't_semicolon']
Current Token 2: <t_id, 25, 'add'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Expression', 't_assign', 'Array2', 't_id']
Current Token: <t_id, 25, 'add'>
Matched Token: T_ID, Value: add
Current Token 2: <t_whitespace, 25, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Expression', 't_assign', 'Array2']
Current Token: <t_assign, 25, '='>
Action: Array2 -> ['Îµ']
Current Token 2: <t_assign, 25, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Expression', 't_assign']
Current Token: <t_assign, 25, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 25, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Expression']
Current Token: <t_false, 25, None>
Action: Expression -> ['OrExp']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'OrExp']
Current Token: <t_false, 25, None>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_false, 25, None>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_false, 25, None>
Action: NotExp -> ['CompExp']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_false, 25, None>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_false, 25, None>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_false, 25, None>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_false, 25, None>
Action: Factor -> ['Atom']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_false, 25, None>
Action: Atom -> ['t_false']
Current Token 2: <t_false, 25, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_false']
Current Token: <t_false, 25, None>
Matched Token: T_FALSE, Value: None
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 25, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 25, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 25, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 25, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Or']
Current Token: <t_semicolon, 25, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 25, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 25, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 25, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_for, 26, None>
Action: StatementList -> ['LoopStmt', 'StatementList']
Current Token 2: <t_for, 26, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'LoopStmt']
Current Token: <t_for, 26, None>
Action: LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
Current Token 2: <t_for, 26, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp', 't_for']
Current Token: <t_for, 26, None>
Matched Token: T_FOR, Value: None
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp']
Current Token: <t_lp, 26, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_int, 26, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'ForStmt']
Current Token: <t_int, 26, None>
Action: ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
Current Token 2: <t_int, 26, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopVardec']
Current Token: <t_int, 26, None>
Action: LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
Current Token 2: <t_int, 26, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id', 't_int']
Current Token: <t_int, 26, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id']
Current Token: <t_id, 26, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign']
Current Token: <t_assign, 26, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression']
Current Token: <t_decimal, 26, '0'>
Action: Expression -> ['OrExp']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'OrExp']
Current Token: <t_decimal, 26, '0'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_decimal, 26, '0'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_decimal, 26, '0'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_decimal, 26, '0'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 26, '0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 26, '0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 26, '0'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 26, '0'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 26, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 26, '0'>
Matched Token: T_DECIMAL, Value: 0
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 26, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 26, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 26, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 26, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or']
Current Token: <t_semicolon, 26, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon']
Current Token: <t_semicolon, 26, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr']
Current Token: <t_lop_not, 26, '!'>
Action: LoopExpr -> ['Expression']
Current Token 2: <t_lop_not, 26, '!'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Expression']
Current Token: <t_lop_not, 26, '!'>
Action: Expression -> ['OrExp']
Current Token 2: <t_lop_not, 26, '!'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'OrExp']
Current Token: <t_lop_not, 26, '!'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_lop_not, 26, '!'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_lop_not, 26, '!'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lop_not, 26, '!'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_lop_not, 26, '!'>
Action: NotExp -> ['t_lop_not', 'NotExp']
Current Token 2: <t_lop_not, 26, '!'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp', 't_lop_not']
Current Token: <t_lop_not, 26, '!'>
Matched Token: T_LOP_NOT, Value: !
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 26, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 26, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 26, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 26, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 26, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 26, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 26, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 26, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_id, 26, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_id, 26, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 26, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 26, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 26, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 26, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 26, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 26, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 26, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 26, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_e, 26, '=='>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_e, 26, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_e, 26, '=='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_e, 26, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_e, 26, '=='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_e, 26, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_e, 26, '=='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_e, 26, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_e, 26, '=='>
Action: Comp_OP -> ['t_rop_e']
Current Token 2: <t_rop_e, 26, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_e']
Current Token: <t_rop_e, 26, '=='>
Matched Token: T_ROP_E, Value: ==
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_aop_pl, 26, '+'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_aop_pl, 26, '+'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_aop_pl, 26, '+'>
Action: Factor -> ['t_aop_pl', 'Atom']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom', 't_aop_pl']
Current Token: <t_aop_pl, 26, '+'>
Matched Token: T_AOP_PL, Value: +
Current Token 2: <t_decimal, 26, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 26, '5'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 26, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 26, '5'>
Matched Token: T_DECIMAL, Value: 5
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 26, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 26, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 26, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 26, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 26, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 26, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 26, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 26, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 26, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 26, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or']
Current Token: <t_semicolon, 26, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 26, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon']
Current Token: <t_semicolon, 26, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'LoopStep']
Current Token: <t_id, 26, 'i'>
Action: LoopStep -> ['SimpleStmt2']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'SimpleStmt2']
Current Token: <t_id, 26, 'i'>
Action: SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2', 't_id']
Current Token: <t_id, 26, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2']
Current Token: <t_assign, 26, '='>
Action: Array2 -> ['Îµ']
Current Token 2: <t_assign, 26, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign']
Current Token: <t_assign, 26, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Expression']
Current Token: <t_id, 26, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'OrExp']
Current Token: <t_id, 26, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 26, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 26, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 26, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 26, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 26, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 26, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 26, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 26, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 26, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_pl, 26, '+'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_pl, 26, '+'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_pl, 26, '+'>
Action: Arth1 -> ['t_aop_pl', 'Term', 'Arth1']
Current Token 2: <t_aop_pl, 26, '+'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_pl']
Current Token: <t_aop_pl, 26, '+'>
Matched Token: T_AOP_PL, Value: +
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 26, '1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 26, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 26, '1'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 26, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 26, '1'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 26, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 26, '1'>
Matched Token: T_DECIMAL, Value: 1
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 26, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 26, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 26, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or', 'And']
Current Token: <t_rp, 26, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp', 'Or']
Current Token: <t_rp, 26, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 26, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rp']
Current Token: <t_rp, 26, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 26, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_lc, 26, '{'>
Action: StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
Current Token 2: <t_lc, 26, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 26, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 26, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_for, 27, None>
Action: StatementList -> ['LoopStmt', 'StatementList']
Current Token 2: <t_for, 27, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 'LoopStmt']
Current Token: <t_for, 27, None>
Action: LoopStmt -> ['t_for', 't_lp', 'ForStmt', 't_rp']
Current Token 2: <t_for, 27, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp', 't_for']
Current Token: <t_for, 27, None>
Matched Token: T_FOR, Value: None
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt', 't_lp']
Current Token: <t_lp, 27, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_int, 27, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'ForStmt']
Current Token: <t_int, 27, None>
Action: ForStmt -> ['LoopVardec', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopStep']
Current Token 2: <t_int, 27, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'LoopVardec']
Current Token: <t_int, 27, None>
Action: LoopVardec -> ['t_int', 't_id', 't_assign', 'Expression']
Current Token 2: <t_int, 27, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id', 't_int']
Current Token: <t_int, 27, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign', 't_id']
Current Token: <t_id, 27, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression', 't_assign']
Current Token: <t_assign, 27, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Expression']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: Expression -> ['OrExp']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'OrExp']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: Factor -> ['Atom']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_hexadecimal, 27, '0x0'>
Action: Atom -> ['t_hexadecimal']
Current Token 2: <t_hexadecimal, 27, '0x0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_hexadecimal']
Current Token: <t_hexadecimal, 27, '0x0'>
Matched Token: T_HEXADECIMAL, Value: 0x0
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 27, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 27, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 27, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 27, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon', 'Or']
Current Token: <t_semicolon, 27, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr', 't_semicolon']
Current Token: <t_semicolon, 27, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'LoopExpr']
Current Token: <t_id, 27, 'j'>
Action: LoopExpr -> ['Expression']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Expression']
Current Token: <t_id, 27, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'OrExp']
Current Token: <t_id, 27, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'AndExp']
Current Token: <t_id, 27, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'NotExp']
Current Token: <t_id, 27, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'CompExp']
Current Token: <t_id, 27, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 27, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 27, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 27, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 27, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 27, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_e, 27, '>='>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_e, 27, '>='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_e, 27, '>='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_e, 27, '>='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_e, 27, '>='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_e, 27, '>='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_rop_e, 27, '>='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_e, 27, '>='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_e, 27, '>='>
Action: Comp_OP -> ['t_rop_e']
Current Token 2: <t_rop_e, 27, '>='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr', 't_rop_e']
Current Token: <t_rop_e, 27, '>='>
Matched Token: T_ROP_E, Value: >=
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_aop_mn, 27, '-'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_aop_mn, 27, '-'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_aop_mn, 27, '-'>
Action: Factor -> ['t_aop_mn', 'Atom']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom', 't_aop_mn']
Current Token: <t_aop_mn, 27, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_decimal, 27, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 27, '5'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 27, '5'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 27, '5'>
Matched Token: T_DECIMAL, Value: 5
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 27, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 27, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 27, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or', 'And']
Current Token: <t_semicolon, 27, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon', 'Or']
Current Token: <t_semicolon, 27, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 27, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep', 't_semicolon']
Current Token: <t_semicolon, 27, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'LoopStep']
Current Token: <t_id, 27, 'j'>
Action: LoopStep -> ['SimpleStmt2']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'SimpleStmt2']
Current Token: <t_id, 27, 'j'>
Action: SimpleStmt2 -> ['t_id', 'Array2', 't_assign', 'Expression']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2', 't_id']
Current Token: <t_id, 27, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign', 'Array2']
Current Token: <t_assign, 27, '='>
Action: Array2 -> ['Îµ']
Current Token 2: <t_assign, 27, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression', 't_assign']
Current Token: <t_assign, 27, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Expression']
Current Token: <t_id, 27, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'OrExp']
Current Token: <t_id, 27, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 27, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 27, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 27, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 27, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 27, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 27, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 27, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 27, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 27, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_mn, 27, '-'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_mn, 27, '-'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_aop_mn, 27, '-'>
Action: Arth1 -> ['t_aop_mn', 'Term', 'Arth1']
Current Token 2: <t_aop_mn, 27, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term', 't_aop_mn']
Current Token: <t_aop_mn, 27, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 27, '1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 27, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 27, '1'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 27, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 27, '1'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 27, '1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 27, '1'>
Matched Token: T_DECIMAL, Value: 1
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 27, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 27, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 27, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or', 'And']
Current Token: <t_rp, 27, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp', 'Or']
Current Token: <t_rp, 27, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 27, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rp']
Current Token: <t_rp, 27, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 27, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_lc, 27, '{'>
Action: StatementList -> ['t_lc', 'StatementList', 't_rc', 'StatementList']
Current Token 2: <t_lc, 27, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 27, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 27, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_if, 28, None>
Action: StatementList -> ['IfStmt', 'StatementList']
Current Token 2: <t_if, 28, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'IfStmt']
Current Token: <t_if, 28, None>
Action: IfStmt -> ['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']
Current Token 2: <t_if, 28, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression', 't_if']
Current Token: <t_if, 28, None>
Matched Token: T_IF, Value: None
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression']
Current Token: <t_lp, 28, '('>
Action: Expression -> ['OrExp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'OrExp']
Current Token: <t_lp, 28, '('>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'AndExp']
Current Token: <t_lp, 28, '('>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 28, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 28, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 28, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 28, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 28, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 28, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 28, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_lp, 28, '('>
Action: Expression -> ['OrExp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_lp, 28, '('>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_lp, 28, '('>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 28, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 28, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 28, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 28, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 28, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 28, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 28, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_id, 28, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_id, 28, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 28, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 28, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 28, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 28, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 28, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 28, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 28, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 28, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_rm, 28, '%'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_rm, 28, '%'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_rm, 28, '%'>
Action: Arth2 -> ['t_aop_rm', 'Factor', 'Arth2']
Current Token 2: <t_aop_rm, 28, '%'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor', 't_aop_rm']
Current Token: <t_aop_rm, 28, '%'>
Matched Token: T_AOP_RM, Value: %
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 28, '4'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 28, '4'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 28, '4'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 28, '4'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 28, '4'>
Matched Token: T_DECIMAL, Value: 4
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 28, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 28, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 28, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 28, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 28, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 28, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_e, 28, '=='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_e, 28, '=='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_e, 28, '=='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_e, 28, '=='>
Action: Comp_OP -> ['t_rop_e']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_e']
Current Token: <t_rop_e, 28, '=='>
Matched Token: T_ROP_E, Value: ==
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 28, '0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 28, '0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 28, '0'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 28, '0'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 28, '0'>
Matched Token: T_DECIMAL, Value: 0
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_lop_or, 28, '||'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_lop_or, 28, '||'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_lop_or, 28, '||'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_lop_or, 28, '||'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_lop_or, 28, '||'>
Action: Comp -> ['Îµ']
Current Token 2: <t_lop_or, 28, '||'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_lop_or, 28, '||'>
Action: And -> ['Îµ']
Current Token 2: <t_lop_or, 28, '||'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_lop_or, 28, '||'>
Action: Or -> ['t_lop_or', 'AndExp', 'Or']
Current Token 2: <t_lop_or, 28, '||'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp', 't_lop_or']
Current Token: <t_lop_or, 28, '||'>
Matched Token: T_LOP_OR, Value: ||
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_lp, 28, '('>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 28, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 28, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 28, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 28, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 28, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 28, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 28, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 28, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_id, 28, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_id, 28, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 28, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 28, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 28, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 28, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 28, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 28, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 28, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 28, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 28, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_aop_rm, 28, '%'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_aop_rm, 28, '%'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_aop_rm, 28, '%'>
Action: Arth2 -> ['t_aop_rm', 'Factor', 'Arth2']
Current Token 2: <t_aop_rm, 28, '%'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor', 't_aop_rm']
Current Token: <t_aop_rm, 28, '%'>
Matched Token: T_AOP_RM, Value: %
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 28, '3'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 28, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 28, '3'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 28, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 28, '3'>
Matched Token: T_DECIMAL, Value: 3
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 28, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 28, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 28, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 28, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 28, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 28, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_e, 28, '=='>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_e, 28, '=='>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_e, 28, '=='>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_e, 28, '=='>
Action: Comp_OP -> ['t_rop_e']
Current Token 2: <t_rop_e, 28, '=='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_e']
Current Token: <t_rop_e, 28, '=='>
Matched Token: T_ROP_E, Value: ==
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 28, '0'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 28, '0'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 28, '0'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 28, '0'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 28, '0'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 28, '0'>
Matched Token: T_DECIMAL, Value: 0
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 28, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 28, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 28, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 28, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 28, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 28, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 28, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 28, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_lc, 28, '{'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_lc, 28, '{'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp']
Current Token: <t_lc, 28, '{'>
Action: Comp -> ['Îµ']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And']
Current Token: <t_lc, 28, '{'>
Action: And -> ['Îµ']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or']
Current Token: <t_lc, 28, '{'>
Action: Or -> ['Îµ']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt']
Current Token: <t_lc, 28, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 28, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 28, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 28, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_continue, 29, None>
Action: StatementList -> ['ContinueStmt', 'StatementList']
Current Token 2: <t_continue, 29, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 'ContinueStmt']
Current Token: <t_continue, 29, None>
Action: ContinueStmt -> ['t_continue', 't_semicolon']
Current Token 2: <t_continue, 29, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 't_continue']
Current Token: <t_continue, 29, None>
Matched Token: T_CONTINUE, Value: None
Current Token 2: <t_semicolon, 29, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 29, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 29, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_rc, 30, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 30, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc']
Current Token: <t_rc, 30, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 30, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt']
Current Token: <t_if, 32, None>
Action: ElseStmt -> ['Îµ']
Current Token 2: <t_if, 32, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_if, 32, None>
Action: StatementList -> ['IfStmt', 'StatementList']
Current Token 2: <t_if, 32, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'IfStmt']
Current Token: <t_if, 32, None>
Action: IfStmt -> ['t_if', 'Expression', 'CompoundStmt', 'ElseStmt']
Current Token 2: <t_if, 32, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression', 't_if']
Current Token: <t_if, 32, None>
Matched Token: T_IF, Value: None
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Expression']
Current Token: <t_lp, 32, '('>
Action: Expression -> ['OrExp']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'OrExp']
Current Token: <t_lp, 32, '('>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'AndExp']
Current Token: <t_lp, 32, '('>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'NotExp']
Current Token: <t_lp, 32, '('>
Action: NotExp -> ['CompExp']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'CompExp']
Current Token: <t_lp, 32, '('>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_lp, 32, '('>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_lp, 32, '('>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_lp, 32, '('>
Action: Factor -> ['Atom']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_lp, 32, '('>
Action: Atom -> ['t_lp', 'Expression', 't_rp']
Current Token 2: <t_lp, 32, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression', 't_lp']
Current Token: <t_lp, 32, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Expression']
Current Token: <t_id, 32, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'OrExp']
Current Token: <t_id, 32, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'AndExp']
Current Token: <t_id, 32, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 32, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 32, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 32, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 32, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 32, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 32, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 32, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 32, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_l, 32, '<'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_l, 32, '<'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_l, 32, '<'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_l, 32, '<'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_l, 32, '<'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_l, 32, '<'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_l, 32, '<'>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_l, 32, '<'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_l, 32, '<'>
Action: Comp_OP -> ['t_rop_l']
Current Token 2: <t_rop_l, 32, '<'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_l']
Current Token: <t_rop_l, 32, '<'>
Matched Token: T_ROP_L, Value: <
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_aop_mn, 32, '-'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_aop_mn, 32, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_aop_mn, 32, '-'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_aop_mn, 32, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_aop_mn, 32, '-'>
Action: Factor -> ['t_aop_mn', 'Atom']
Current Token 2: <t_aop_mn, 32, '-'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom', 't_aop_mn']
Current Token: <t_aop_mn, 32, '-'>
Matched Token: T_AOP_MN, Value: -
Current Token 2: <t_decimal, 32, '4'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 32, '4'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 32, '4'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 32, '4'>
Matched Token: T_DECIMAL, Value: 4
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_lop_and, 32, '&&'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_lop_and, 32, '&&'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_lop_and, 32, '&&'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_lop_and, 32, '&&'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_lop_and, 32, '&&'>
Action: Comp -> ['Îµ']
Current Token 2: <t_lop_and, 32, '&&'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_lop_and, 32, '&&'>
Action: And -> ['t_lop_and', 'NotExp', 'And']
Current Token 2: <t_lop_and, 32, '&&'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp', 't_lop_and']
Current Token: <t_lop_and, 32, '&&'>
Matched Token: T_LOP_AND, Value: &&
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'NotExp']
Current Token: <t_id, 32, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'CompExp']
Current Token: <t_id, 32, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 32, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 32, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 32, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 32, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 32, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 32, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rop_ge, 32, '>'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rop_ge, 32, '>'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rop_ge, 32, '>'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rop_ge, 32, '>'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rop_ge, 32, '>'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rop_ge, 32, '>'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rop_ge, 32, '>'>
Action: Comp -> ['Comp_OP', 'Expr', 'Comp']
Current Token 2: <t_rop_ge, 32, '>'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 'Comp_OP']
Current Token: <t_rop_ge, 32, '>'>
Action: Comp_OP -> ['t_rop_ge']
Current Token 2: <t_rop_ge, 32, '>'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr', 't_rop_ge']
Current Token: <t_rop_ge, 32, '>'>
Matched Token: T_ROP_GE, Value: >
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_decimal, 32, '3'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_decimal, 32, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_decimal, 32, '3'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_decimal, 32, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_decimal, 32, '3'>
Action: Factor -> ['Atom']
Current Token 2: <t_decimal, 32, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_decimal, 32, '3'>
Action: Atom -> ['t_decimal']
Current Token 2: <t_decimal, 32, '3'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_decimal']
Current Token: <t_decimal, 32, '3'>
Matched Token: T_DECIMAL, Value: 3
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 32, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 32, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And', 'Comp']
Current Token: <t_rp, 32, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or', 'And']
Current Token: <t_rp, 32, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Or']
Current Token: <t_rp, 32, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 32, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 32, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_whitespace, 32, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_lc, 32, '{'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_lc, 32, '{'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And', 'Comp']
Current Token: <t_lc, 32, '{'>
Action: Comp -> ['Îµ']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or', 'And']
Current Token: <t_lc, 32, '{'>
Action: And -> ['Îµ']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt', 'Or']
Current Token: <t_lc, 32, '{'>
Action: Or -> ['Îµ']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 'CompoundStmt']
Current Token: <t_lc, 32, '{'>
Action: CompoundStmt -> ['t_lc', 'StatementList', 't_rc']
Current Token 2: <t_lc, 32, '{'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_lc']
Current Token: <t_lc, 32, '{'>
Matched Token: T_LC, Value: {
Current Token 2: <t_whitespace, 32, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_break, 33, None>
Action: StatementList -> ['BreakStmt', 'StatementList']
Current Token 2: <t_break, 33, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 'BreakStmt']
Current Token: <t_break, 33, None>
Action: BreakStmt -> ['t_break', 't_semicolon']
Current Token 2: <t_break, 33, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon', 't_break']
Current Token: <t_break, 33, None>
Matched Token: T_BREAK, Value: None
Current Token 2: <t_semicolon, 33, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 33, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 33, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc', 'StatementList']
Current Token: <t_rc, 34, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 34, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt', 't_rc']
Current Token: <t_rc, 34, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 34, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'ElseStmt']
Current Token: <t_print, 36, None>
Action: ElseStmt -> ['Îµ']
Current Token 2: <t_print, 36, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 36, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 36, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 36, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 36, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 36, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 36, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 36, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 36, 'i'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 36, 'i'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 36, 'i'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 36, 'i'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 36, 'i'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 36, 'i'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 36, 'i'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 36, 'i'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 36, 'i'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 36, 'i'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 36, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 36, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 36, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 36, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 36, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 36, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 36, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 36, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 36, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 36, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 36, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 36, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 36, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 36, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 37, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 37, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 37, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 37, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 37, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 37, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 37, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 37, 'String_2'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 37, 'String_2'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 37, 'String_2'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 37, 'String_2'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 37, 'String_2'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 37, 'String_2'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 37, 'String_2'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 37, 'String_2'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 37, 'String_2'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 37, 'String_2'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 37, 'String_2'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 37, 'String_2'>
Matched Token: T_ID, Value: String_2
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 37, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 37, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 37, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 37, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 37, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 37, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 37, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 37, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 37, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 37, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 37, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 37, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 38, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 38, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 38, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 38, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 38, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 38, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 38, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 38, 'j'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 38, 'j'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 38, 'j'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 38, 'j'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 38, 'j'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 38, 'j'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 38, 'j'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 38, 'j'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 38, 'j'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 38, 'j'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 38, 'j'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 38, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 38, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 38, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 38, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 38, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 38, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 38, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 38, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 38, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 38, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 38, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 38, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 38, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 39, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 39, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 39, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 39, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 39, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 39, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 39, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 39, '_assign1'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 39, '_assign1'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 39, '_assign1'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 39, '_assign1'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 39, '_assign1'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 39, '_assign1'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 39, '_assign1'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 39, '_assign1'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 39, '_assign1'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 39, '_assign1'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 39, '_assign1'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 39, '_assign1'>
Matched Token: T_ID, Value: _assign1
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_rp, 39, ')'>
Action: IsFunction -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 39, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 39, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 39, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 39, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 39, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 39, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 39, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 39, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 39, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 39, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 39, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_print, 40, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 40, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 40, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 40, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 40, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 40, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 40, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_id, 40, 'test_function'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_id, 40, 'test_function'>
Action: Expression -> ['OrExp']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_id, 40, 'test_function'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_id, 40, 'test_function'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_id, 40, 'test_function'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_id, 40, 'test_function'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_id, 40, 'test_function'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_id, 40, 'test_function'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_id, 40, 'test_function'>
Action: Factor -> ['Atom']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_id, 40, 'test_function'>
Action: Atom -> ['t_id', 'IsFunction']
Current Token 2: <t_id, 40, 'test_function'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction', 't_id']
Current Token: <t_id, 40, 'test_function'>
Matched Token: T_ID, Value: test_function
Current Token 2: <t_lp, 40, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'IsFunction']
Current Token: <t_lp, 40, '('>
Action: IsFunction -> ['t_lp', 'Parameters2', 't_rp']
Current Token 2: <t_lp, 40, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Parameters2', 't_lp']
Current Token: <t_lp, 40, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_id, 40, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'Parameters2']
Current Token: <t_id, 40, 'i'>
Action: Parameters2 -> ['ParameterList2']
Current Token 2: <t_id, 40, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', 'ParameterList2']
Current Token: <t_id, 40, 'i'>
Action: ParameterList2 -> ['t_id', "ParameterList2'"]
Current Token 2: <t_id, 40, 'i'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 't_id']
Current Token: <t_id, 40, 'i'>
Matched Token: T_ID, Value: i
Current Token 2: <t_comma, 40, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_comma, 40, ','>
Action: ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
Current Token 2: <t_comma, 40, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id', 't_comma']
Current Token: <t_comma, 40, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_whitespace, 40, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id']
Current Token: <t_id, 40, 'j'>
Matched Token: T_ID, Value: j
Current Token 2: <t_comma, 40, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array']
Current Token: <t_comma, 40, ','>
Action: Array -> ['Îµ']
Current Token 2: <t_comma, 40, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_comma, 40, ','>
Action: ParameterList2' -> ['t_comma', 't_id', 'Array', "ParameterList2'"]
Current Token 2: <t_comma, 40, ','>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id', 't_comma']
Current Token: <t_comma, 40, ','>
Matched Token: T_COMMA, Value: ,
Current Token 2: <t_whitespace, 40, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array', 't_id']
Current Token: <t_id, 40, 'add'>
Matched Token: T_ID, Value: add
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'", 'Array']
Current Token: <t_rp, 40, ')'>
Action: Array -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp', "ParameterList2'"]
Current Token: <t_rp, 40, ')'>
Action: ParameterList2' -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_rp']
Current Token: <t_rp, 40, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 40, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 40, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 40, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 40, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 40, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 40, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 40, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 40, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 40, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 40, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 40, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_rc, 41, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 41, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList', 't_rc']
Current Token: <t_rc, 41, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 41, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc', 'StatementList']
Current Token: <t_rc, 42, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 42, '}'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_rc']
Current Token: <t_rc, 42, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 42, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_print, 43, None>
Action: StatementList -> ['PrintStmt', 'StatementList']
Current Token 2: <t_print, 43, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'PrintStmt']
Current Token: <t_print, 43, None>
Action: PrintStmt -> ['t_print', 't_lp', 'PrintRules', 't_rp', 't_semicolon']
Current Token 2: <t_print, 43, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp', 't_print']
Current Token: <t_print, 43, None>
Matched Token: T_PRINT, Value: None
Current Token 2: <t_lp, 43, '('>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules', 't_lp']
Current Token: <t_lp, 43, '('>
Matched Token: T_LP, Value: (
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintRules']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: PrintRules -> ['Expression', 'PrintList']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Expression']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: Expression -> ['OrExp']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'OrExp']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'AndExp']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'NotExp']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'CompExp']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: Factor -> ['Atom']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Action: Atom -> ['t_string']
Current Token 2: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_string']
Current Token: <t_string, 43, '"this is\\" a whole string no other token like \'=\' or \'else\' or even \\\\\\\\comment should be recogized"'>
Matched Token: T_STRING, Value: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recogized"
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_rp, 43, ')'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_rp, 43, ')'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And', 'Comp']
Current Token: <t_rp, 43, ')'>
Action: Comp -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or', 'And']
Current Token: <t_rp, 43, ')'>
Action: And -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList', 'Or']
Current Token: <t_rp, 43, ')'>
Action: Or -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp', 'PrintList']
Current Token: <t_rp, 43, ')'>
Action: PrintList -> ['Îµ']
Current Token 2: <t_rp, 43, ')'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 't_rp']
Current Token: <t_rp, 43, ')'>
Matched Token: T_RP, Value: )
Current Token 2: <t_semicolon, 43, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 43, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 43, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_char, 44, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_char, 44, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_char, 44, None>
Action: VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_char, 44, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_char']
Current Token: <t_char, 44, None>
Matched Token: T_CHAR, Value: None
Current Token 2: <t_whitespace, 44, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 44, 'back'>
Matched Token: T_ID, Value: back
Current Token 2: <t_whitespace, 44, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_assign, 44, '='>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_assign, 44, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_assign, 44, '='>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_assign, 44, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_assign, 44, '='>
Action: Array -> ['Îµ']
Current Token 2: <t_assign, 44, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 44, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 44, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 44, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 44, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_char, 44, "'\\\\'">
Action: Expression -> ['OrExp']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_char, 44, "'\\\\'">
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_char, 44, "'\\\\'">
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_char, 44, "'\\\\'">
Action: NotExp -> ['CompExp']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_char, 44, "'\\\\'">
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_char, 44, "'\\\\'">
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_char, 44, "'\\\\'">
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_char, 44, "'\\\\'">
Action: Factor -> ['Atom']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_char, 44, "'\\\\'">
Action: Atom -> ['t_char']
Current Token 2: <t_char, 44, "'\\\\'">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_char']
Current Token: <t_char, 44, "'\\\\'">
Matched Token: T_CHAR, Value: '\\'
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 44, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 44, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 44, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 44, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 44, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 44, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 44, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 44, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 44, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_char, 45, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_char, 45, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_char, 45, None>
Action: VardecStmt -> ['t_char', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_char, 45, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_char']
Current Token: <t_char, 45, None>
Matched Token: T_CHAR, Value: None
Current Token 2: <t_whitespace, 45, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 45, 'quote'>
Matched Token: T_ID, Value: quote
Current Token 2: <t_whitespace, 45, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_assign, 45, '='>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_assign, 45, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_assign, 45, '='>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_assign, 45, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_assign, 45, '='>
Action: Array -> ['Îµ']
Current Token 2: <t_assign, 45, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 45, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 45, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 45, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 45, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_char, 45, "'\\''">
Action: Expression -> ['OrExp']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_char, 45, "'\\''">
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_char, 45, "'\\''">
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_char, 45, "'\\''">
Action: NotExp -> ['CompExp']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_char, 45, "'\\''">
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_char, 45, "'\\''">
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_char, 45, "'\\''">
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_char, 45, "'\\''">
Action: Factor -> ['Atom']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_char, 45, "'\\''">
Action: Atom -> ['t_char']
Current Token 2: <t_char, 45, "'\\''">
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_char']
Current Token: <t_char, 45, "'\\''">
Matched Token: T_CHAR, Value: '\''
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 45, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 45, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 45, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 45, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 45, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 45, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 45, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 45, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 45, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_int, 46, None>
Action: StatementList -> ['VardecStmt', 'StatementList']
Current Token 2: <t_int, 46, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 'VardecStmt']
Current Token: <t_int, 46, None>
Action: VardecStmt -> ['t_int', 't_id', 'Vardeclist', 't_semicolon']
Current Token 2: <t_int, 46, None>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id', 't_int']
Current Token: <t_int, 46, None>
Matched Token: T_INT, Value: None
Current Token 2: <t_whitespace, 46, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist', 't_id']
Current Token: <t_id, 46, '_123'>
Matched Token: T_ID, Value: _123
Current Token 2: <t_whitespace, 46, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', 'Vardeclist']
Current Token: <t_assign, 46, '='>
Action: Vardeclist -> ['VardecInit', "Vardeclist'"]
Current Token 2: <t_assign, 46, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'VardecInit']
Current Token: <t_assign, 46, '='>
Action: VardecInit -> ['Array', "VardecInit'"]
Current Token 2: <t_assign, 46, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'", 'Array']
Current Token: <t_assign, 46, '='>
Action: Array -> ['Îµ']
Current Token 2: <t_assign, 46, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", "VardecInit'"]
Current Token: <t_assign, 46, '='>
Action: VardecInit' -> ['t_assign', 'Expression']
Current Token 2: <t_assign, 46, '='>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression', 't_assign']
Current Token: <t_assign, 46, '='>
Matched Token: T_ASSIGN, Value: =
Current Token 2: <t_whitespace, 46, ' '>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Expression']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: Expression -> ['OrExp']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'OrExp']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: OrExp -> ['AndExp', 'Or']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'AndExp']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: AndExp -> ['NotExp', 'And']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'NotExp']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: NotExp -> ['CompExp']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'CompExp']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: CompExp -> ['Expr', 'Comp']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Expr']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: Expr -> ['Term', 'Arth1']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Term']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: Term -> ['Factor', 'Arth2']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Factor']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: Factor -> ['Atom']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 'Atom']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Action: Atom -> ['t_hexadecimal']
Current Token 2: <t_hexadecimal, 46, '0XABCdef1230'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2', 't_hexadecimal']
Current Token: <t_hexadecimal, 46, '0XABCdef1230'>
Matched Token: T_HEXADECIMAL, Value: 0XABCdef1230
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1', 'Arth2']
Current Token: <t_semicolon, 46, ';'>
Action: Arth2 -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp', 'Arth1']
Current Token: <t_semicolon, 46, ';'>
Action: Arth1 -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And', 'Comp']
Current Token: <t_semicolon, 46, ';'>
Action: Comp -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or', 'And']
Current Token: <t_semicolon, 46, ';'>
Action: And -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'", 'Or']
Current Token: <t_semicolon, 46, ';'>
Action: Or -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon', "Vardeclist'"]
Current Token: <t_semicolon, 46, ';'>
Action: Vardeclist' -> ['Îµ']
Current Token 2: <t_semicolon, 46, ';'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList', 't_semicolon']
Current Token: <t_semicolon, 46, ';'>
Matched Token: T_SEMICOLON, Value: ;
Current Token 2: <t_whitespace, 46, '\n'>
-----------
Stack: ['$', "Declist'", 't_rc', 'StatementList']
Current Token: <t_rc, 47, '}'>
Action: StatementList -> ['Îµ']
Current Token 2: <t_rc, 47, '}'>
-----------
Stack: ['$', "Declist'", 't_rc']
Current Token: <t_rc, 47, '}'>
Matched Token: T_RC, Value: }
Current Token 2: <t_whitespace, 47, '\n'>
-----------
Stack: ['$', "Declist'"]
Current Token: $
Action: Declist' -> ['Îµ']
Current Token 2: $
-----------
Stack: ['$']
Current Token: $
